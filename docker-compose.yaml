version: "3.9"

services:
  db:
    container_name: postgres
    restart: always
    build:
      context: .
      dockerfile: ./build/postgres.Dockerfile
    volumes:
      - postgresdb-data:/var/lib/postgresql/data
    env_file:
      - ./.env
    ports:
      - "${DB_PORT}:5432"
    networks:
      - tean-network
  #migrate:
  #  build: .
  #  depends_on:
  #    - db
  #  entrypoint: [
  #    "/bin/sh", "-c",
  #    "until pg_isready -h db -p 5432 -U postgres; do echo waiting for db; sleep 2; done; migrate -path=/migrations -database postgres://postgres@db:5432/mydb?sslmode=disable up"
  #  ]
  #  volumes:
  #    - ./migrations:/migrations
  main:
    depends_on:
      - db
    container_name: mainService
    build:
      context: .
      dockerfile: ./build/main.Dockerfile
    ports:
      - '8080:8080'
    env_file:
      - ./.env
    volumes:
      - "${BASE_DIR}:/docker-cian/images"
    networks:
      - tean-network

  tean-auth:
    env_file:
      - ./.env
    container_name: ${GRPC_AUTH_CONTAINER_IP}
    build:
      context: .
      dockerfile: ./build/auth.Dockerfile
    restart: always
    expose:
      - "${GRPC_AUTH_PORT}"
    ports:
      - '8091:8091'
    depends_on:
      - db
    networks:
      - tean-network

  tean-user:
    env_file:
      - ./.env
    container_name: ${GRPC_USER_CONTAINER_IP}
    build:
      context: .
      dockerfile: ./build/user.Dockerfile
    restart: always
    expose:
      - "${GRPC_USER_PORT}"
    ports:
      - '8092:8092'
    depends_on:
      - db
    networks:
      - tean-network

  tean-advert:
    env_file:
      - ./.env
    container_name: ${GRPC_ADVERT_CONTAINER_IP}
    build:
      context: .
      dockerfile: ./build/advert.Dockerfile
    restart: always
    expose:
      - "${GRPC_ADVERT_PORT}"
    ports:
      - '8090:8090'
    depends_on:
      - db
    networks:
      - tean-network

  tean-question:
    env_file:
      - ./.env
    container_name: ${GRPC_QUESTION_CONTAINER_IP}
    build:
      context: .
      dockerfile: ./build/question.Dockerfile
    restart: always
    expose:
      - "${GRPC_QUESTION_PORT}"
    ports:
      - '8094:8094'
    depends_on:
      - db
    networks:
      - tean-network

  tean-complex:
    env_file:
      - ./.env
    container_name: ${GRPC_COMPLEX_CONTAINER_IP}
    build:
      context: .
      dockerfile: ./build/complex.Dockerfile
    restart: always
    expose:
      - "${GRPC_COMPLEX_PORT}"
    ports:
      - '8095:8095'
    depends_on:
      - db
    networks:
      - tean-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - tean-network

  node_exporter:
    depends_on:
      - prometheus
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    hostname: node_exporter
    ports:
      - "9100:9100"
    networks:
      - tean-network

  grafana:
    image: grafana/grafana-enterprise
    volumes:
      - ${GRAFANA_DIR}:/var/lib/grafana/
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=root
      - GF_SECURITY_ADMIN_PASSWORD=root
    networks:
      - tean-network

volumes:
  postgresdb-data:
    driver: local

networks:
  tean-network:
    name: tean-network
    driver: bridge