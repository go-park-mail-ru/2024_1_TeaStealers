// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1cf24d94Decode20241TeaStealersInternalModels(in *jlexer.Lexer, out *BuildingData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complexName":
			out.ComplexName = string(in.String())
		case "floor":
			out.Floor = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "yearCreation":
			out.YearCreation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1cf24d94Encode20241TeaStealersInternalModels(out *jwriter.Writer, in BuildingData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complexName\":"
		out.RawString(prefix[1:])
		out.String(string(in.ComplexName))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuildingData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1cf24d94Encode20241TeaStealersInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildingData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1cf24d94Encode20241TeaStealersInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildingData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1cf24d94Decode20241TeaStealersInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildingData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1cf24d94Decode20241TeaStealersInternalModels(l, v)
}
func easyjson1cf24d94Decode20241TeaStealersInternalModels1(in *jlexer.Lexer, out *BuildingCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complexId":
			out.ComplexID = int64(in.Int64())
		case "floor":
			out.Floor = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "adressId":
			out.AddressID = int64(in.Int64())
		case "yearCreation":
			out.YearCreation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1cf24d94Encode20241TeaStealersInternalModels1(out *jwriter.Writer, in BuildingCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complexId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ComplexID))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"adressId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AddressID))
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuildingCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1cf24d94Encode20241TeaStealersInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildingCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1cf24d94Encode20241TeaStealersInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildingCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1cf24d94Decode20241TeaStealersInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildingCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1cf24d94Decode20241TeaStealersInternalModels1(l, v)
}
func easyjson1cf24d94Decode20241TeaStealersInternalModels2(in *jlexer.Lexer, out *Building) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "complexId":
			out.ComplexID = int64(in.Int64())
		case "floor":
			out.Floor = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "adressId":
			out.AddressID = int64(in.Int64())
		case "yearCreation":
			out.YearCreation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1cf24d94Encode20241TeaStealersInternalModels2(out *jwriter.Writer, in Building) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"complexId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ComplexID))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"adressId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AddressID))
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Building) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1cf24d94Encode20241TeaStealersInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Building) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1cf24d94Encode20241TeaStealersInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Building) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1cf24d94Decode20241TeaStealersInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Building) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1cf24d94Decode20241TeaStealersInternalModels2(l, v)
}
