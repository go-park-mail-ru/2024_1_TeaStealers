// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5d887aeeDecode20241TeaStealersInternalModels(in *jlexer.Lexer, out *ThemeStatistic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "theme":
			out.Theme = QuestionTheme(in.String())
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]*QuestionAnswerStatisticsResp, 0, 8)
					} else {
						out.Questions = []*QuestionAnswerStatisticsResp{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *QuestionAnswerStatisticsResp
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(QuestionAnswerStatisticsResp)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Questions = append(out.Questions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5d887aeeEncode20241TeaStealersInternalModels(out *jwriter.Writer, in ThemeStatistic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"theme\":"
		out.RawString(prefix[1:])
		out.String(string(in.Theme))
	}
	{
		const prefix string = ",\"questions\":"
		out.RawString(prefix)
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Questions {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ThemeStatistic) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5d887aeeEncode20241TeaStealersInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ThemeStatistic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5d887aeeEncode20241TeaStealersInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ThemeStatistic) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5d887aeeDecode20241TeaStealersInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ThemeStatistic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5d887aeeDecode20241TeaStealersInternalModels(l, v)
}
func easyjson5d887aeeDecode20241TeaStealersInternalModels1(in *jlexer.Lexer, out *QuestionWithTitleStat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count_answers":
			out.CountAnswers = int(in.Int())
		case "mark":
			out.Mark = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5d887aeeEncode20241TeaStealersInternalModels1(out *jwriter.Writer, in QuestionWithTitleStat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count_answers\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CountAnswers))
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Int(int(in.Mark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionWithTitleStat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5d887aeeEncode20241TeaStealersInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionWithTitleStat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5d887aeeEncode20241TeaStealersInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionWithTitleStat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5d887aeeDecode20241TeaStealersInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionWithTitleStat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5d887aeeDecode20241TeaStealersInternalModels1(l, v)
}
func easyjson5d887aeeDecode20241TeaStealersInternalModels2(in *jlexer.Lexer, out *QuestionAnswerStatisticsResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "questions_stat":
			if in.IsNull() {
				in.Skip()
				out.QuestionsTopic = nil
			} else {
				in.Delim('[')
				if out.QuestionsTopic == nil {
					if !in.IsDelim(']') {
						out.QuestionsTopic = make([]*QuestionWithTitleStat, 0, 8)
					} else {
						out.QuestionsTopic = []*QuestionWithTitleStat{}
					}
				} else {
					out.QuestionsTopic = (out.QuestionsTopic)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *QuestionWithTitleStat
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(QuestionWithTitleStat)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.QuestionsTopic = append(out.QuestionsTopic, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5d887aeeEncode20241TeaStealersInternalModels2(out *jwriter.Writer, in QuestionAnswerStatisticsResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"questions_stat\":"
		out.RawString(prefix)
		if in.QuestionsTopic == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.QuestionsTopic {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionAnswerStatisticsResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5d887aeeEncode20241TeaStealersInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionAnswerStatisticsResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5d887aeeEncode20241TeaStealersInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionAnswerStatisticsResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5d887aeeDecode20241TeaStealersInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionAnswerStatisticsResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5d887aeeDecode20241TeaStealersInternalModels2(l, v)
}
func easyjson5d887aeeDecode20241TeaStealersInternalModels3(in *jlexer.Lexer, out *QuestionAnswerResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.QuestionID).UnmarshalText(data))
			}
		case "mark":
			out.Mark = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5d887aeeEncode20241TeaStealersInternalModels3(out *jwriter.Writer, in QuestionAnswerResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.QuestionID).MarshalText())
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Int(int(in.Mark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionAnswerResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5d887aeeEncode20241TeaStealersInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionAnswerResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5d887aeeEncode20241TeaStealersInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionAnswerResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5d887aeeDecode20241TeaStealersInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionAnswerResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5d887aeeDecode20241TeaStealersInternalModels3(l, v)
}
func easyjson5d887aeeDecode20241TeaStealersInternalModels4(in *jlexer.Lexer, out *QuestionAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "question_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.QuestionID).UnmarshalText(data))
			}
		case "mark":
			out.Mark = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5d887aeeEncode20241TeaStealersInternalModels4(out *jwriter.Writer, in QuestionAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix)
		out.RawText((in.QuestionID).MarshalText())
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Int(int(in.Mark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5d887aeeEncode20241TeaStealersInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5d887aeeEncode20241TeaStealersInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5d887aeeDecode20241TeaStealersInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5d887aeeDecode20241TeaStealersInternalModels4(l, v)
}
