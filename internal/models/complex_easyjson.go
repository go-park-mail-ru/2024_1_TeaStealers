// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson86c2dad6Decode20241TeaStealersInternalModels(in *jlexer.Lexer, out *ComplexData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "companyId":
			out.CompanyId = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "dateBeginBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateBeginBuild).UnmarshalJSON(data))
			}
		case "dateEndBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateEndBuild).UnmarshalJSON(data))
			}
		case "withoutFinishingOption":
			out.WithoutFinishingOption = bool(in.Bool())
		case "finishingOption":
			out.FinishingOption = bool(in.Bool())
		case "preFinishingOption":
			out.PreFinishingOption = bool(in.Bool())
		case "classHousing":
			out.ClassHousing = ClassHouse(in.String())
		case "parking":
			out.Parking = bool(in.Bool())
		case "security":
			out.Security = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson86c2dad6Encode20241TeaStealersInternalModels(out *jwriter.Writer, in ComplexData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"companyId\":"
		out.RawString(prefix)
		out.Int64(int64(in.CompanyId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"dateBeginBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateBeginBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"dateEndBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateEndBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"withoutFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.WithoutFinishingOption))
	}
	{
		const prefix string = ",\"finishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.FinishingOption))
	}
	{
		const prefix string = ",\"preFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreFinishingOption))
	}
	{
		const prefix string = ",\"classHousing\":"
		out.RawString(prefix)
		out.String(string(in.ClassHousing))
	}
	{
		const prefix string = ",\"parking\":"
		out.RawString(prefix)
		out.Bool(bool(in.Parking))
	}
	{
		const prefix string = ",\"security\":"
		out.RawString(prefix)
		out.Bool(bool(in.Security))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplexData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson86c2dad6Encode20241TeaStealersInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplexData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson86c2dad6Encode20241TeaStealersInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplexData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson86c2dad6Decode20241TeaStealersInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplexData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson86c2dad6Decode20241TeaStealersInternalModels(l, v)
}
func easyjson86c2dad6Decode20241TeaStealersInternalModels1(in *jlexer.Lexer, out *ComplexCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "companyId":
			out.CompanyId = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "dateBeginBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateBeginBuild).UnmarshalJSON(data))
			}
		case "dateEndBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateEndBuild).UnmarshalJSON(data))
			}
		case "withoutFinishingOption":
			out.WithoutFinishingOption = bool(in.Bool())
		case "finishingOption":
			out.FinishingOption = bool(in.Bool())
		case "preFinishingOption":
			out.PreFinishingOption = bool(in.Bool())
		case "classHousing":
			out.ClassHousing = ClassHouse(in.String())
		case "parking":
			out.Parking = bool(in.Bool())
		case "security":
			out.Security = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson86c2dad6Encode20241TeaStealersInternalModels1(out *jwriter.Writer, in ComplexCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"companyId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CompanyId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"dateBeginBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateBeginBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"dateEndBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateEndBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"withoutFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.WithoutFinishingOption))
	}
	{
		const prefix string = ",\"finishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.FinishingOption))
	}
	{
		const prefix string = ",\"preFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreFinishingOption))
	}
	{
		const prefix string = ",\"classHousing\":"
		out.RawString(prefix)
		out.String(string(in.ClassHousing))
	}
	{
		const prefix string = ",\"parking\":"
		out.RawString(prefix)
		out.Bool(bool(in.Parking))
	}
	{
		const prefix string = ",\"security\":"
		out.RawString(prefix)
		out.Bool(bool(in.Security))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplexCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson86c2dad6Encode20241TeaStealersInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplexCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson86c2dad6Encode20241TeaStealersInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplexCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson86c2dad6Decode20241TeaStealersInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplexCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson86c2dad6Decode20241TeaStealersInternalModels1(l, v)
}
func easyjson86c2dad6Decode20241TeaStealersInternalModels2(in *jlexer.Lexer, out *ComplexAdvertProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complexId":
			out.ComplexId = string(in.String())
		case "nameComplex":
			out.NameComplex = string(in.String())
		case "photoCompany":
			out.PhotoCompany = string(in.String())
		case "nameCompany":
			out.NameCompany = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson86c2dad6Encode20241TeaStealersInternalModels2(out *jwriter.Writer, in ComplexAdvertProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complexId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ComplexId))
	}
	{
		const prefix string = ",\"nameComplex\":"
		out.RawString(prefix)
		out.String(string(in.NameComplex))
	}
	{
		const prefix string = ",\"photoCompany\":"
		out.RawString(prefix)
		out.String(string(in.PhotoCompany))
	}
	{
		const prefix string = ",\"nameCompany\":"
		out.RawString(prefix)
		out.String(string(in.NameCompany))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplexAdvertProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson86c2dad6Encode20241TeaStealersInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplexAdvertProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson86c2dad6Encode20241TeaStealersInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplexAdvertProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson86c2dad6Decode20241TeaStealersInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplexAdvertProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson86c2dad6Decode20241TeaStealersInternalModels2(l, v)
}
func easyjson86c2dad6Decode20241TeaStealersInternalModels3(in *jlexer.Lexer, out *Complex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "companyId":
			out.CompanyId = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "dateBeginBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateBeginBuild).UnmarshalJSON(data))
			}
		case "dateEndBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateEndBuild).UnmarshalJSON(data))
			}
		case "withoutFinishingOption":
			out.WithoutFinishingOption = bool(in.Bool())
		case "finishingOption":
			out.FinishingOption = bool(in.Bool())
		case "preFinishingOption":
			out.PreFinishingOption = bool(in.Bool())
		case "classHousing":
			out.ClassHousing = ClassHouse(in.String())
		case "parking":
			out.Parking = bool(in.Bool())
		case "security":
			out.Security = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson86c2dad6Encode20241TeaStealersInternalModels3(out *jwriter.Writer, in Complex) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"companyId\":"
		out.RawString(prefix)
		out.Int64(int64(in.CompanyId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"dateBeginBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateBeginBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"dateEndBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateEndBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"withoutFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.WithoutFinishingOption))
	}
	{
		const prefix string = ",\"finishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.FinishingOption))
	}
	{
		const prefix string = ",\"preFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreFinishingOption))
	}
	{
		const prefix string = ",\"classHousing\":"
		out.RawString(prefix)
		out.String(string(in.ClassHousing))
	}
	{
		const prefix string = ",\"parking\":"
		out.RawString(prefix)
		out.Bool(bool(in.Parking))
	}
	{
		const prefix string = ",\"security\":"
		out.RawString(prefix)
		out.Bool(bool(in.Security))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Complex) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson86c2dad6Encode20241TeaStealersInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Complex) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson86c2dad6Encode20241TeaStealersInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Complex) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson86c2dad6Decode20241TeaStealersInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Complex) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson86c2dad6Decode20241TeaStealersInternalModels3(l, v)
}
