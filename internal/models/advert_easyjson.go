// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA66148a6Decode20241TeaStealersInternalModels(in *jlexer.Lexer, out *PageInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalElements":
			out.TotalElements = int(in.Int())
		case "totalPages":
			out.TotalPages = int(in.Int())
		case "currentPage":
			out.CurrentPage = int(in.Int())
		case "pageSize":
			out.PageSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels(out *jwriter.Writer, in PageInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalElements\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalElements))
	}
	{
		const prefix string = ",\"totalPages\":"
		out.RawString(prefix)
		out.Int(int(in.TotalPages))
	}
	{
		const prefix string = ",\"currentPage\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentPage))
	}
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix)
		out.Int(int(in.PageSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PageInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PageInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PageInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PageInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels1(in *jlexer.Lexer, out *ComplexAdvertHouseCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = int64(in.Int64())
		case "buildingId":
			out.BuildingID = int64(in.Int64())
		case "advertTypeSale":
			out.AdvertTypeSale = TypePlacementAdvert(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "statusArea":
			out.StatusArea = StatusAreaHouse(in.String())
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "statusHome":
			out.StatusHome = StatusHomeHouse(in.String())
		case "price":
			out.Price = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels1(out *jwriter.Writer, in ComplexAdvertHouseCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"buildingId\":"
		out.RawString(prefix)
		out.Int64(int64(in.BuildingID))
	}
	{
		const prefix string = ",\"advertTypeSale\":"
		out.RawString(prefix)
		out.String(string(in.AdvertTypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"statusArea\":"
		out.RawString(prefix)
		out.String(string(in.StatusArea))
	}
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"statusHome\":"
		out.RawString(prefix)
		out.String(string(in.StatusHome))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplexAdvertHouseCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplexAdvertHouseCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplexAdvertHouseCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplexAdvertHouseCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels1(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels2(in *jlexer.Lexer, out *ComplexAdvertFlatCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = int64(in.Int64())
		case "buildingId":
			out.BuildingID = int64(in.Int64())
		case "advertTypeSale":
			out.AdvertTypeSale = TypePlacementAdvert(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "floor":
			out.Floor = int(in.Int())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareResidential":
			out.SquareResidential = float64(in.Float64())
		case "apartment":
			out.Apartment = bool(in.Bool())
		case "price":
			out.Price = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels2(out *jwriter.Writer, in ComplexAdvertFlatCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"buildingId\":"
		out.RawString(prefix)
		out.Int64(int64(in.BuildingID))
	}
	{
		const prefix string = ",\"advertTypeSale\":"
		out.RawString(prefix)
		out.String(string(in.AdvertTypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareResidential\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareResidential))
	}
	{
		const prefix string = ",\"apartment\":"
		out.RawString(prefix)
		out.Bool(bool(in.Apartment))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplexAdvertFlatCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplexAdvertFlatCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplexAdvertFlatCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplexAdvertFlatCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels2(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels3(in *jlexer.Lexer, out *AdvertUpdateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "typeAdvert":
			out.TypeAdvert = string(in.String())
		case "typeSale":
			out.TypeSale = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "address":
			(out.Address).UnmarshalEasyJSON(in)
		case "houseProperties":
			if in.IsNull() {
				in.Skip()
				out.HouseProperties = nil
			} else {
				if out.HouseProperties == nil {
					out.HouseProperties = new(HouseProperties)
				}
				easyjsonA66148a6Decode20241TeaStealersInternalModels4(in, out.HouseProperties)
			}
		case "flatProperties":
			if in.IsNull() {
				in.Skip()
				out.FlatProperties = nil
			} else {
				if out.FlatProperties == nil {
					out.FlatProperties = new(FlatProperties)
				}
				easyjsonA66148a6Decode20241TeaStealersInternalModels5(in, out.FlatProperties)
			}
		case "yearCreation":
			out.YearCreation = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels3(out *jwriter.Writer, in AdvertUpdateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"typeAdvert\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TypeAdvert))
	}
	{
		const prefix string = ",\"typeSale\":"
		out.RawString(prefix)
		out.String(string(in.TypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		(in.Address).MarshalEasyJSON(out)
	}
	if in.HouseProperties != nil {
		const prefix string = ",\"houseProperties\":"
		out.RawString(prefix)
		easyjsonA66148a6Encode20241TeaStealersInternalModels4(out, *in.HouseProperties)
	}
	if in.FlatProperties != nil {
		const prefix string = ",\"flatProperties\":"
		out.RawString(prefix)
		easyjsonA66148a6Encode20241TeaStealersInternalModels5(out, *in.FlatProperties)
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertUpdateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertUpdateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertUpdateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertUpdateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels3(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels5(in *jlexer.Lexer, out *FlatProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "floor":
			out.Floor = int(in.Int())
		case "floorGeneral":
			out.FloorGeneral = int(in.Int())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		case "squareResidential":
			out.SquareResidential = float64(in.Float64())
		case "apartment":
			out.Apartment = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels5(out *jwriter.Writer, in FlatProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"floorGeneral\":"
		out.RawString(prefix)
		out.Int(int(in.FloorGeneral))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	{
		const prefix string = ",\"squareResidential\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareResidential))
	}
	{
		const prefix string = ",\"apartment\":"
		out.RawString(prefix)
		out.Bool(bool(in.Apartment))
	}
	out.RawByte('}')
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels4(in *jlexer.Lexer, out *HouseProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "statusArea":
			out.StatusArea = StatusAreaHouse(in.String())
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "statusHome":
			out.StatusHome = StatusHomeHouse(in.String())
		case "floor":
			out.Floor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels4(out *jwriter.Writer, in HouseProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"statusArea\":"
		out.RawString(prefix)
		out.String(string(in.StatusArea))
	}
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"statusHome\":"
		out.RawString(prefix)
		out.String(string(in.StatusHome))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	out.RawByte('}')
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels6(in *jlexer.Lexer, out *AdvertSquareData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertId":
			out.ID = int64(in.Int64())
		case "typeAdvert":
			out.TypeAdvert = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "typeSale":
			out.TypeSale = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "houseProperties":
			if in.IsNull() {
				in.Skip()
				out.HouseProperties = nil
			} else {
				if out.HouseProperties == nil {
					out.HouseProperties = new(HouseSquareProperties)
				}
				easyjsonA66148a6Decode20241TeaStealersInternalModels7(in, out.HouseProperties)
			}
		case "flatProperties":
			if in.IsNull() {
				in.Skip()
				out.FlatProperties = nil
			} else {
				if out.FlatProperties == nil {
					out.FlatProperties = new(FlatSquareProperties)
				}
				easyjsonA66148a6Decode20241TeaStealersInternalModels8(in, out.FlatProperties)
			}
		case "price":
			out.Price = int(in.Int())
		case "dateCreation":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreation).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels6(out *jwriter.Writer, in AdvertSquareData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"typeAdvert\":"
		out.RawString(prefix)
		out.String(string(in.TypeAdvert))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"typeSale\":"
		out.RawString(prefix)
		out.String(string(in.TypeSale))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"metro\":"
		out.RawString(prefix)
		out.String(string(in.Metro))
	}
	if in.HouseProperties != nil {
		const prefix string = ",\"houseProperties\":"
		out.RawString(prefix)
		easyjsonA66148a6Encode20241TeaStealersInternalModels7(out, *in.HouseProperties)
	}
	if in.FlatProperties != nil {
		const prefix string = ",\"flatProperties\":"
		out.RawString(prefix)
		easyjsonA66148a6Encode20241TeaStealersInternalModels8(out, *in.FlatProperties)
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"dateCreation\":"
		out.RawString(prefix)
		out.Raw((in.DateCreation).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertSquareData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertSquareData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertSquareData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertSquareData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels6(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels8(in *jlexer.Lexer, out *FlatSquareProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "floor":
			out.Floor = int(in.Int())
		case "floorGeneral":
			out.FloorGeneral = int(in.Int())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels8(out *jwriter.Writer, in FlatSquareProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"floorGeneral\":"
		out.RawString(prefix)
		out.Int(int(in.FloorGeneral))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	out.RawByte('}')
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels7(in *jlexer.Lexer, out *HouseSquareProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "floor":
			out.Floor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels7(out *jwriter.Writer, in HouseSquareProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	out.RawByte('}')
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels9(in *jlexer.Lexer, out *AdvertRectangleData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertId":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "typeAdvert":
			out.TypeAdvert = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "typeSale":
			out.TypeSale = string(in.String())
		case "adress":
			out.Address = string(in.String())
		case "adressPoint":
			out.AddressPoint = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "isLiked":
			out.IsLiked = bool(in.Bool())
		case "flatProperties":
			if in.IsNull() {
				in.Skip()
				out.FlatProperties = nil
			} else {
				if out.FlatProperties == nil {
					out.FlatProperties = new(FlatRectangleProperties)
				}
				easyjsonA66148a6Decode20241TeaStealersInternalModels10(in, out.FlatProperties)
			}
		case "houseProperties":
			if in.IsNull() {
				in.Skip()
				out.HouseProperties = nil
			} else {
				if out.HouseProperties == nil {
					out.HouseProperties = new(HouseRectangleProperties)
				}
				easyjsonA66148a6Decode20241TeaStealersInternalModels11(in, out.HouseProperties)
			}
		case "price":
			out.Price = int(in.Int())
		case "dateCreation":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreation).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels9(out *jwriter.Writer, in AdvertRectangleData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"typeAdvert\":"
		out.RawString(prefix)
		out.String(string(in.TypeAdvert))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"typeSale\":"
		out.RawString(prefix)
		out.String(string(in.TypeSale))
	}
	{
		const prefix string = ",\"adress\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"adressPoint\":"
		out.RawString(prefix)
		out.String(string(in.AddressPoint))
	}
	{
		const prefix string = ",\"metro\":"
		out.RawString(prefix)
		out.String(string(in.Metro))
	}
	{
		const prefix string = ",\"isLiked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	if in.FlatProperties != nil {
		const prefix string = ",\"flatProperties\":"
		out.RawString(prefix)
		easyjsonA66148a6Encode20241TeaStealersInternalModels10(out, *in.FlatProperties)
	}
	if in.HouseProperties != nil {
		const prefix string = ",\"houseProperties\":"
		out.RawString(prefix)
		easyjsonA66148a6Encode20241TeaStealersInternalModels11(out, *in.HouseProperties)
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"dateCreation\":"
		out.RawString(prefix)
		out.Raw((in.DateCreation).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertRectangleData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertRectangleData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertRectangleData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertRectangleData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels9(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels11(in *jlexer.Lexer, out *HouseRectangleProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "floor":
			out.Floor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels11(out *jwriter.Writer, in HouseRectangleProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	out.RawByte('}')
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels10(in *jlexer.Lexer, out *FlatRectangleProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "floor":
			out.Floor = int(in.Int())
		case "floorGeneral":
			out.FloorGeneral = int(in.Int())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels10(out *jwriter.Writer, in FlatRectangleProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"floorGeneral\":"
		out.RawString(prefix)
		out.Int(int(in.FloorGeneral))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	out.RawByte('}')
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels12(in *jlexer.Lexer, out *AdvertHouseCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = int64(in.Int64())
		case "advertTypeSale":
			out.AdvertTypeSale = TypePlacementAdvert(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "statusArea":
			out.StatusArea = StatusAreaHouse(in.String())
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "statusHome":
			out.StatusHome = StatusHomeHouse(in.String())
		case "price":
			out.Price = int64(in.Int64())
		case "floorGeneral":
			out.FloorGeneral = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "address":
			(out.Address).UnmarshalEasyJSON(in)
		case "yearCreation":
			out.YearCreation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels12(out *jwriter.Writer, in AdvertHouseCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"advertTypeSale\":"
		out.RawString(prefix)
		out.String(string(in.AdvertTypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"statusArea\":"
		out.RawString(prefix)
		out.String(string(in.StatusArea))
	}
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"statusHome\":"
		out.RawString(prefix)
		out.String(string(in.StatusHome))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"floorGeneral\":"
		out.RawString(prefix)
		out.Int(int(in.FloorGeneral))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		(in.Address).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertHouseCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertHouseCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertHouseCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertHouseCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels12(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels13(in *jlexer.Lexer, out *AdvertFlatCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = int64(in.Int64())
		case "advertTypeSale":
			out.AdvertTypeSale = TypePlacementAdvert(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "floor":
			out.Floor = int(in.Int())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareResidential":
			out.SquareResidential = float64(in.Float64())
		case "apartment":
			out.Apartment = bool(in.Bool())
		case "price":
			out.Price = int64(in.Int64())
		case "floorGeneral":
			out.FloorGeneral = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "address":
			(out.Address).UnmarshalEasyJSON(in)
		case "yearCreation":
			out.YearCreation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels13(out *jwriter.Writer, in AdvertFlatCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"advertTypeSale\":"
		out.RawString(prefix)
		out.String(string(in.AdvertTypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareResidential\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareResidential))
	}
	{
		const prefix string = ",\"apartment\":"
		out.RawString(prefix)
		out.Bool(bool(in.Apartment))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"floorGeneral\":"
		out.RawString(prefix)
		out.Int(int(in.FloorGeneral))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		(in.Address).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertFlatCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertFlatCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertFlatCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertFlatCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels13(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels14(in *jlexer.Lexer, out *AdvertFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "minPrice":
			out.MinPrice = int64(in.Int64())
		case "maxPrice":
			out.MaxPrice = int64(in.Int64())
		case "offset":
			out.Offset = int(in.Int())
		case "page":
			out.Page = int(in.Int())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "advertType":
			out.AdvertType = string(in.String())
		case "dealType":
			out.DealType = string(in.String())
		case "adress":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels14(out *jwriter.Writer, in AdvertFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"minPrice\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.MinPrice))
	}
	{
		const prefix string = ",\"maxPrice\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxPrice))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"advertType\":"
		out.RawString(prefix)
		out.String(string(in.AdvertType))
	}
	{
		const prefix string = ",\"dealType\":"
		out.RawString(prefix)
		out.String(string(in.DealType))
	}
	{
		const prefix string = ",\"adress\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels14(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels15(in *jlexer.Lexer, out *AdvertDataPage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "adverts":
			if in.IsNull() {
				in.Skip()
				out.Adverts = nil
			} else {
				in.Delim('[')
				if out.Adverts == nil {
					if !in.IsDelim(']') {
						out.Adverts = make([]*AdvertRectangleData, 0, 8)
					} else {
						out.Adverts = []*AdvertRectangleData{}
					}
				} else {
					out.Adverts = (out.Adverts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *AdvertRectangleData
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(AdvertRectangleData)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Adverts = append(out.Adverts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pageInfo":
			if in.IsNull() {
				in.Skip()
				out.PageInfo = nil
			} else {
				if out.PageInfo == nil {
					out.PageInfo = new(PageInfo)
				}
				(*out.PageInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels15(out *jwriter.Writer, in AdvertDataPage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"adverts\":"
		out.RawString(prefix[1:])
		if in.Adverts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Adverts {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pageInfo\":"
		out.RawString(prefix)
		if in.PageInfo == nil {
			out.RawString("null")
		} else {
			(*in.PageInfo).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertDataPage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertDataPage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertDataPage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertDataPage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels15(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels16(in *jlexer.Lexer, out *AdvertData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertId":
			out.ID = int64(in.Int64())
		case "advertType":
			out.AdvertType = string(in.String())
		case "typeSale":
			out.TypeSale = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "countViews":
			out.CountViews = int64(in.Int64())
		case "countLikes":
			out.CountLikes = int64(in.Int64())
		case "price":
			out.Price = int64(in.Int64())
		case "phone":
			out.Phone = string(in.String())
		case "isLiked":
			out.IsLiked = bool(in.Bool())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "metro":
			out.Metro = string(in.String())
		case "adress":
			out.Address = string(in.String())
		case "adressPoint":
			out.AddressPoint = string(in.String())
		case "priceHistory":
			if in.IsNull() {
				in.Skip()
				out.PriceChange = nil
			} else {
				in.Delim('[')
				if out.PriceChange == nil {
					if !in.IsDelim(']') {
						out.PriceChange = make([]*PriceChangeData, 0, 8)
					} else {
						out.PriceChange = []*PriceChangeData{}
					}
				} else {
					out.PriceChange = (out.PriceChange)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *PriceChangeData
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(PriceChangeData)
						}
						easyjsonA66148a6Decode20241TeaStealersInternalModels17(in, v4)
					}
					out.PriceChange = append(out.PriceChange, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]*ImageResp, 0, 8)
					} else {
						out.Images = []*ImageResp{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *ImageResp
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(ImageResp)
						}
						easyjsonA66148a6Decode20241TeaStealersInternalModels18(in, v5)
					}
					out.Images = append(out.Images, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "houseProperties":
			if in.IsNull() {
				in.Skip()
				out.HouseProperties = nil
			} else {
				if out.HouseProperties == nil {
					out.HouseProperties = new(HouseProperties)
				}
				easyjsonA66148a6Decode20241TeaStealersInternalModels4(in, out.HouseProperties)
			}
		case "flatProperties":
			if in.IsNull() {
				in.Skip()
				out.FlatProperties = nil
			} else {
				if out.FlatProperties == nil {
					out.FlatProperties = new(FlatProperties)
				}
				easyjsonA66148a6Decode20241TeaStealersInternalModels5(in, out.FlatProperties)
			}
		case "yearCreation":
			out.YearCreation = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "complexProperties":
			if in.IsNull() {
				in.Skip()
				out.ComplexProperties = nil
			} else {
				if out.ComplexProperties == nil {
					out.ComplexProperties = new(ComplexAdvertProperties)
				}
				easyjsonA66148a6Decode20241TeaStealersInternalModels19(in, out.ComplexProperties)
			}
		case "dateCreation":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreation).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels16(out *jwriter.Writer, in AdvertData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"advertType\":"
		out.RawString(prefix)
		out.String(string(in.AdvertType))
	}
	{
		const prefix string = ",\"typeSale\":"
		out.RawString(prefix)
		out.String(string(in.TypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"countViews\":"
		out.RawString(prefix)
		out.Int64(int64(in.CountViews))
	}
	{
		const prefix string = ",\"countLikes\":"
		out.RawString(prefix)
		out.Int64(int64(in.CountLikes))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isLiked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"metro\":"
		out.RawString(prefix)
		out.String(string(in.Metro))
	}
	{
		const prefix string = ",\"adress\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"adressPoint\":"
		out.RawString(prefix)
		out.String(string(in.AddressPoint))
	}
	{
		const prefix string = ",\"priceHistory\":"
		out.RawString(prefix)
		if in.PriceChange == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.PriceChange {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					easyjsonA66148a6Encode20241TeaStealersInternalModels17(out, *v7)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Images {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					easyjsonA66148a6Encode20241TeaStealersInternalModels18(out, *v9)
				}
			}
			out.RawByte(']')
		}
	}
	if in.HouseProperties != nil {
		const prefix string = ",\"houseProperties\":"
		out.RawString(prefix)
		easyjsonA66148a6Encode20241TeaStealersInternalModels4(out, *in.HouseProperties)
	}
	if in.FlatProperties != nil {
		const prefix string = ",\"flatProperties\":"
		out.RawString(prefix)
		easyjsonA66148a6Encode20241TeaStealersInternalModels5(out, *in.FlatProperties)
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	if in.ComplexProperties != nil {
		const prefix string = ",\"complexProperties\":"
		out.RawString(prefix)
		easyjsonA66148a6Encode20241TeaStealersInternalModels19(out, *in.ComplexProperties)
	}
	{
		const prefix string = ",\"dateCreation\":"
		out.RawString(prefix)
		out.Raw((in.DateCreation).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels16(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels19(in *jlexer.Lexer, out *ComplexAdvertProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complexId":
			out.ComplexId = string(in.String())
		case "nameComplex":
			out.NameComplex = string(in.String())
		case "photoCompany":
			out.PhotoCompany = string(in.String())
		case "nameCompany":
			out.NameCompany = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels19(out *jwriter.Writer, in ComplexAdvertProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complexId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ComplexId))
	}
	{
		const prefix string = ",\"nameComplex\":"
		out.RawString(prefix)
		out.String(string(in.NameComplex))
	}
	{
		const prefix string = ",\"photoCompany\":"
		out.RawString(prefix)
		out.String(string(in.PhotoCompany))
	}
	{
		const prefix string = ",\"nameCompany\":"
		out.RawString(prefix)
		out.String(string(in.NameCompany))
	}
	out.RawByte('}')
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels18(in *jlexer.Lexer, out *ImageResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "photo":
			out.Photo = string(in.String())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels18(out *jwriter.Writer, in ImageResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels17(in *jlexer.Lexer, out *PriceChangeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = int64(in.Int64())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreation).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels17(out *jwriter.Writer, in PriceChangeData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Raw((in.DateCreation).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels20(in *jlexer.Lexer, out *Advert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "userId":
			out.UserID = int64(in.Int64())
		case "advertTypeSale":
			out.AdvertTypeSale = TypePlacementAdvert(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels20(out *jwriter.Writer, in Advert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"advertTypeSale\":"
		out.RawString(prefix)
		out.String(string(in.AdvertTypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Advert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Advert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Advert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Advert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels20(l, v)
}
func easyjsonA66148a6Decode20241TeaStealersInternalModels21(in *jlexer.Lexer, out *AddressData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "province":
			out.Province = string(in.String())
		case "town":
			out.Town = string(in.String())
		case "street":
			out.Street = string(in.String())
		case "house":
			out.House = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "addressPoint":
			out.AddressPoint = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA66148a6Encode20241TeaStealersInternalModels21(out *jwriter.Writer, in AddressData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"province\":"
		out.RawString(prefix[1:])
		out.String(string(in.Province))
	}
	{
		const prefix string = ",\"town\":"
		out.RawString(prefix)
		out.String(string(in.Town))
	}
	{
		const prefix string = ",\"street\":"
		out.RawString(prefix)
		out.String(string(in.Street))
	}
	{
		const prefix string = ",\"house\":"
		out.RawString(prefix)
		out.String(string(in.House))
	}
	{
		const prefix string = ",\"metro\":"
		out.RawString(prefix)
		out.String(string(in.Metro))
	}
	{
		const prefix string = ",\"addressPoint\":"
		out.RawString(prefix)
		out.String(string(in.AddressPoint))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddressData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA66148a6Encode20241TeaStealersInternalModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddressData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA66148a6Encode20241TeaStealersInternalModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddressData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA66148a6Decode20241TeaStealersInternalModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddressData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA66148a6Decode20241TeaStealersInternalModels21(l, v)
}
