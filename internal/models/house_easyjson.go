// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8ff04bdaDecode20241TeaStealersInternalModels(in *jlexer.Lexer, out *HouseSquareProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "floor":
			out.Floor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8ff04bdaEncode20241TeaStealersInternalModels(out *jwriter.Writer, in HouseSquareProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HouseSquareProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8ff04bdaEncode20241TeaStealersInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HouseSquareProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8ff04bdaEncode20241TeaStealersInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HouseSquareProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8ff04bdaDecode20241TeaStealersInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HouseSquareProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8ff04bdaDecode20241TeaStealersInternalModels(l, v)
}
func easyjson8ff04bdaDecode20241TeaStealersInternalModels1(in *jlexer.Lexer, out *HouseRectangleProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "floor":
			out.Floor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8ff04bdaEncode20241TeaStealersInternalModels1(out *jwriter.Writer, in HouseRectangleProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HouseRectangleProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8ff04bdaEncode20241TeaStealersInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HouseRectangleProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8ff04bdaEncode20241TeaStealersInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HouseRectangleProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8ff04bdaDecode20241TeaStealersInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HouseRectangleProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8ff04bdaDecode20241TeaStealersInternalModels1(l, v)
}
func easyjson8ff04bdaDecode20241TeaStealersInternalModels2(in *jlexer.Lexer, out *HouseProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "statusArea":
			out.StatusArea = StatusAreaHouse(in.String())
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "statusHome":
			out.StatusHome = StatusHomeHouse(in.String())
		case "floor":
			out.Floor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8ff04bdaEncode20241TeaStealersInternalModels2(out *jwriter.Writer, in HouseProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"statusArea\":"
		out.RawString(prefix)
		out.String(string(in.StatusArea))
	}
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"statusHome\":"
		out.RawString(prefix)
		out.String(string(in.StatusHome))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HouseProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8ff04bdaEncode20241TeaStealersInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HouseProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8ff04bdaEncode20241TeaStealersInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HouseProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8ff04bdaDecode20241TeaStealersInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HouseProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8ff04bdaDecode20241TeaStealersInternalModels2(l, v)
}
func easyjson8ff04bdaDecode20241TeaStealersInternalModels3(in *jlexer.Lexer, out *House) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "buildingId":
			out.BuildingID = int64(in.Int64())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "statusArea":
			out.StatusArea = StatusAreaHouse(in.String())
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "statusHome":
			out.StatusHome = StatusHomeHouse(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8ff04bdaEncode20241TeaStealersInternalModels3(out *jwriter.Writer, in House) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"buildingId\":"
		out.RawString(prefix)
		out.Int64(int64(in.BuildingID))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"statusArea\":"
		out.RawString(prefix)
		out.String(string(in.StatusArea))
	}
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"statusHome\":"
		out.RawString(prefix)
		out.String(string(in.StatusHome))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v House) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8ff04bdaEncode20241TeaStealersInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v House) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8ff04bdaEncode20241TeaStealersInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *House) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8ff04bdaDecode20241TeaStealersInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *House) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8ff04bdaDecode20241TeaStealersInternalModels3(l, v)
}
