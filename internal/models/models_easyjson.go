// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecode20241TeaStealersInternalModels(in *jlexer.Lexer, out *UserUpdatePassword) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "oldPassword":
			out.OldPassword = string(in.String())
		case "newPassword":
			out.NewPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels(out *jwriter.Writer, in UserUpdatePassword) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"oldPassword\":"
		out.RawString(prefix)
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"newPassword\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserUpdatePassword) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserUpdatePassword) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserUpdatePassword) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserUpdatePassword) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels1(in *jlexer.Lexer, out *UserUpdateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "firstName":
			out.FirstName = string(in.String())
		case "secondName":
			out.SecondName = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels1(out *jwriter.Writer, in UserUpdateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"secondName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserUpdateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserUpdateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserUpdateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserUpdateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels1(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels2(in *jlexer.Lexer, out *UserSignUpData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels2(out *jwriter.Writer, in UserSignUpData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSignUpData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSignUpData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSignUpData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSignUpData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels2(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels3(in *jlexer.Lexer, out *UserLoginData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels3(out *jwriter.Writer, in UserLoginData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserLoginData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserLoginData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserLoginData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserLoginData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels3(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels4(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "firstName":
			out.FirstName = string(in.String())
		case "secondName":
			out.SecondName = string(in.String())
		case "dateBirthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateBirthday).UnmarshalJSON(data))
			}
		case "phone":
			out.Phone = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels4(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"secondName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"dateBirthday\":"
		out.RawString(prefix)
		out.Raw((in.DateBirthday).MarshalJSON())
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels4(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels5(in *jlexer.Lexer, out *UpdatePriorityRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cardNumber":
			out.CardNumber = string(in.String())
		case "cardExpiry":
			out.CardExpiry = string(in.String())
		case "cardCVC":
			out.CardCvc = string(in.String())
		case "donationAmount":
			out.DonationAmount = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels5(out *jwriter.Writer, in UpdatePriorityRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cardNumber\":"
		out.RawString(prefix[1:])
		out.String(string(in.CardNumber))
	}
	{
		const prefix string = ",\"cardExpiry\":"
		out.RawString(prefix)
		out.String(string(in.CardExpiry))
	}
	{
		const prefix string = ",\"cardCVC\":"
		out.RawString(prefix)
		out.String(string(in.CardCvc))
	}
	{
		const prefix string = ",\"donationAmount\":"
		out.RawString(prefix)
		out.String(string(in.DonationAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatePriorityRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatePriorityRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatePriorityRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatePriorityRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels5(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels6(in *jlexer.Lexer, out *ThemeStatistic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "theme":
			out.Theme = QuestionTheme(in.String())
		case "questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]*QuestionAnswerStatisticsResp, 0, 8)
					} else {
						out.Questions = []*QuestionAnswerStatisticsResp{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *QuestionAnswerStatisticsResp
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(QuestionAnswerStatisticsResp)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Questions = append(out.Questions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels6(out *jwriter.Writer, in ThemeStatistic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"theme\":"
		out.RawString(prefix[1:])
		out.String(string(in.Theme))
	}
	{
		const prefix string = ",\"questions\":"
		out.RawString(prefix)
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Questions {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ThemeStatistic) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ThemeStatistic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ThemeStatistic) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ThemeStatistic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels6(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels7(in *jlexer.Lexer, out *StatisticViewAdvert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "userId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "advertId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AdvertID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels7(out *jwriter.Writer, in StatisticViewAdvert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.RawText((in.UserID).MarshalText())
	}
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix)
		out.RawText((in.AdvertID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatisticViewAdvert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatisticViewAdvert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatisticViewAdvert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatisticViewAdvert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels7(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels8(in *jlexer.Lexer, out *Rating) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rating":
			out.Rating = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels8(out *jwriter.Writer, in Rating) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rating) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rating) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rating) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rating) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels8(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels9(in *jlexer.Lexer, out *QuestionWithTitleStat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count_answers":
			out.CountAnswers = int(in.Int())
		case "mark":
			out.Mark = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels9(out *jwriter.Writer, in QuestionWithTitleStat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count_answers\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CountAnswers))
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Int(int(in.Mark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionWithTitleStat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionWithTitleStat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionWithTitleStat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionWithTitleStat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels9(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels10(in *jlexer.Lexer, out *QuestionResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "question_text":
			out.QuestionText = string(in.String())
		case "max_mark":
			out.MaxMark = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels10(out *jwriter.Writer, in QuestionResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"question_text\":"
		out.RawString(prefix)
		out.String(string(in.QuestionText))
	}
	{
		const prefix string = ",\"max_mark\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxMark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels10(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels11(in *jlexer.Lexer, out *QuestionAnswerStatisticsResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "questions_stat":
			if in.IsNull() {
				in.Skip()
				out.QuestionsTopic = nil
			} else {
				in.Delim('[')
				if out.QuestionsTopic == nil {
					if !in.IsDelim(']') {
						out.QuestionsTopic = make([]*QuestionWithTitleStat, 0, 8)
					} else {
						out.QuestionsTopic = []*QuestionWithTitleStat{}
					}
				} else {
					out.QuestionsTopic = (out.QuestionsTopic)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *QuestionWithTitleStat
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(QuestionWithTitleStat)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.QuestionsTopic = append(out.QuestionsTopic, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels11(out *jwriter.Writer, in QuestionAnswerStatisticsResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"questions_stat\":"
		out.RawString(prefix)
		if in.QuestionsTopic == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.QuestionsTopic {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionAnswerStatisticsResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionAnswerStatisticsResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionAnswerStatisticsResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionAnswerStatisticsResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels11(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels12(in *jlexer.Lexer, out *QuestionAnswerResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "question_id":
			out.QuestionID = int64(in.Int64())
		case "mark":
			out.Mark = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels12(out *jwriter.Writer, in QuestionAnswerResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Int(int(in.Mark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionAnswerResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionAnswerResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionAnswerResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionAnswerResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels12(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels13(in *jlexer.Lexer, out *QuestionAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int64(in.Int64())
		case "question_id":
			out.QuestionID = int64(in.Int64())
		case "mark":
			out.Mark = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels13(out *jwriter.Writer, in QuestionAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"question_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.QuestionID))
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Int(int(in.Mark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels13(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels14(in *jlexer.Lexer, out *Question) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "question_text":
			out.QuestionText = string(in.String())
		case "question_theme":
			out.Theme = QuestionTheme(in.String())
		case "max_mark":
			out.MaxMark = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels14(out *jwriter.Writer, in Question) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"question_text\":"
		out.RawString(prefix)
		out.String(string(in.QuestionText))
	}
	{
		const prefix string = ",\"question_theme\":"
		out.RawString(prefix)
		out.String(string(in.Theme))
	}
	{
		const prefix string = ",\"max_mark\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxMark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Question) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Question) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Question) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Question) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels14(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels15(in *jlexer.Lexer, out *PriceChangeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "price":
			out.Price = int64(in.Int64())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreation).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels15(out *jwriter.Writer, in PriceChangeData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Raw((in.DateCreation).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceChangeData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceChangeData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceChangeData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceChangeData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels15(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels16(in *jlexer.Lexer, out *PriceChange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "advertId":
			out.AdvertID = int64(in.Int64())
		case "price":
			out.Price = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels16(out *jwriter.Writer, in PriceChange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AdvertID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceChange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceChange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceChange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceChange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels16(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels17(in *jlexer.Lexer, out *PageInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalElements":
			out.TotalElements = int(in.Int())
		case "totalPages":
			out.TotalPages = int(in.Int())
		case "currentPage":
			out.CurrentPage = int(in.Int())
		case "pageSize":
			out.PageSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels17(out *jwriter.Writer, in PageInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalElements\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalElements))
	}
	{
		const prefix string = ",\"totalPages\":"
		out.RawString(prefix)
		out.Int(int(in.TotalPages))
	}
	{
		const prefix string = ",\"currentPage\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentPage))
	}
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix)
		out.Int(int(in.PageSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PageInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PageInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PageInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PageInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels17(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels18(in *jlexer.Lexer, out *ImageResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "photo":
			out.Photo = string(in.String())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels18(out *jwriter.Writer, in ImageResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImageResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImageResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImageResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImageResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels18(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels19(in *jlexer.Lexer, out *Image) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "advertId":
			out.AdvertID = int64(in.Int64())
		case "photo":
			out.Photo = string(in.String())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels19(out *jwriter.Writer, in Image) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AdvertID))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Image) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Image) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Image) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Image) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels19(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels20(in *jlexer.Lexer, out *HouseTypeAdvert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "houseId":
			out.HouseID = int64(in.Int64())
		case "advertId":
			out.AdvertID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels20(out *jwriter.Writer, in HouseTypeAdvert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"houseId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.HouseID))
	}
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AdvertID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HouseTypeAdvert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HouseTypeAdvert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HouseTypeAdvert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HouseTypeAdvert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels20(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels21(in *jlexer.Lexer, out *HouseSquareProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "floor":
			out.Floor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels21(out *jwriter.Writer, in HouseSquareProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HouseSquareProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HouseSquareProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HouseSquareProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HouseSquareProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels21(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels22(in *jlexer.Lexer, out *HouseRectangleProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "floor":
			out.Floor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels22(out *jwriter.Writer, in HouseRectangleProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HouseRectangleProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HouseRectangleProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HouseRectangleProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HouseRectangleProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels22(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels23(in *jlexer.Lexer, out *HouseProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "statusArea":
			out.StatusArea = StatusAreaHouse(in.String())
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "statusHome":
			out.StatusHome = StatusHomeHouse(in.String())
		case "floor":
			out.Floor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels23(out *jwriter.Writer, in HouseProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"statusArea\":"
		out.RawString(prefix)
		out.String(string(in.StatusArea))
	}
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"statusHome\":"
		out.RawString(prefix)
		out.String(string(in.StatusHome))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HouseProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HouseProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HouseProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HouseProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels23(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels24(in *jlexer.Lexer, out *House) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "buildingId":
			out.BuildingID = int64(in.Int64())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "statusArea":
			out.StatusArea = StatusAreaHouse(in.String())
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "statusHome":
			out.StatusHome = StatusHomeHouse(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels24(out *jwriter.Writer, in House) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"buildingId\":"
		out.RawString(prefix)
		out.Int64(int64(in.BuildingID))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"statusArea\":"
		out.RawString(prefix)
		out.String(string(in.StatusArea))
	}
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"statusHome\":"
		out.RawString(prefix)
		out.String(string(in.StatusHome))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v House) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v House) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *House) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *House) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels24(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels25(in *jlexer.Lexer, out *FlatTypeAdvert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "flatId":
			out.FlatID = int64(in.Int64())
		case "advertId":
			out.AdvertID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels25(out *jwriter.Writer, in FlatTypeAdvert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"flatId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.FlatID))
	}
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AdvertID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlatTypeAdvert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlatTypeAdvert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlatTypeAdvert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlatTypeAdvert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels25(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels26(in *jlexer.Lexer, out *FlatSquareProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "floor":
			out.Floor = int(in.Int())
		case "floorGeneral":
			out.FloorGeneral = int(in.Int())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels26(out *jwriter.Writer, in FlatSquareProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"floorGeneral\":"
		out.RawString(prefix)
		out.Int(int(in.FloorGeneral))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlatSquareProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlatSquareProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlatSquareProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlatSquareProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels26(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels27(in *jlexer.Lexer, out *FlatRectangleProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "floor":
			out.Floor = int(in.Int())
		case "floorGeneral":
			out.FloorGeneral = int(in.Int())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels27(out *jwriter.Writer, in FlatRectangleProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"floorGeneral\":"
		out.RawString(prefix)
		out.Int(int(in.FloorGeneral))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlatRectangleProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlatRectangleProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlatRectangleProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlatRectangleProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels27(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels28(in *jlexer.Lexer, out *FlatProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "floor":
			out.Floor = int(in.Int())
		case "floorGeneral":
			out.FloorGeneral = int(in.Int())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		case "squareResidential":
			out.SquareResidential = float64(in.Float64())
		case "apartment":
			out.Apartment = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels28(out *jwriter.Writer, in FlatProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"floorGeneral\":"
		out.RawString(prefix)
		out.Int(int(in.FloorGeneral))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	{
		const prefix string = ",\"squareResidential\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareResidential))
	}
	{
		const prefix string = ",\"apartment\":"
		out.RawString(prefix)
		out.Bool(bool(in.Apartment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlatProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlatProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlatProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlatProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels28(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels29(in *jlexer.Lexer, out *Flat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "buildingId":
			out.BuildingID = int64(in.Int64())
		case "floor":
			out.Floor = int(in.Int())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		case "squareResidential":
			out.SquareResidential = float64(in.Float64())
		case "apartment":
			out.Apartment = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels29(out *jwriter.Writer, in Flat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"buildingId\":"
		out.RawString(prefix)
		out.Int64(int64(in.BuildingID))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	{
		const prefix string = ",\"squareResidential\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareResidential))
	}
	{
		const prefix string = ",\"apartment\":"
		out.RawString(prefix)
		out.Bool(bool(in.Apartment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Flat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Flat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Flat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Flat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels29(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels30(in *jlexer.Lexer, out *FavouriteAdvert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "userId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "advertId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AdvertID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels30(out *jwriter.Writer, in FavouriteAdvert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.RawText((in.UserID).MarshalText())
	}
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix)
		out.RawText((in.AdvertID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FavouriteAdvert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FavouriteAdvert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FavouriteAdvert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FavouriteAdvert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels30(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels31(in *jlexer.Lexer, out *ComplexData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "companyId":
			out.CompanyId = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "dateBeginBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateBeginBuild).UnmarshalJSON(data))
			}
		case "dateEndBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateEndBuild).UnmarshalJSON(data))
			}
		case "withoutFinishingOption":
			out.WithoutFinishingOption = bool(in.Bool())
		case "finishingOption":
			out.FinishingOption = bool(in.Bool())
		case "preFinishingOption":
			out.PreFinishingOption = bool(in.Bool())
		case "classHousing":
			out.ClassHousing = ClassHouse(in.String())
		case "parking":
			out.Parking = bool(in.Bool())
		case "security":
			out.Security = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels31(out *jwriter.Writer, in ComplexData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"companyId\":"
		out.RawString(prefix)
		out.Int64(int64(in.CompanyId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"dateBeginBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateBeginBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"dateEndBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateEndBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"withoutFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.WithoutFinishingOption))
	}
	{
		const prefix string = ",\"finishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.FinishingOption))
	}
	{
		const prefix string = ",\"preFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreFinishingOption))
	}
	{
		const prefix string = ",\"classHousing\":"
		out.RawString(prefix)
		out.String(string(in.ClassHousing))
	}
	{
		const prefix string = ",\"parking\":"
		out.RawString(prefix)
		out.Bool(bool(in.Parking))
	}
	{
		const prefix string = ",\"security\":"
		out.RawString(prefix)
		out.Bool(bool(in.Security))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplexData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplexData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplexData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplexData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels31(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels32(in *jlexer.Lexer, out *ComplexCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "companyId":
			out.CompanyId = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "dateBeginBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateBeginBuild).UnmarshalJSON(data))
			}
		case "dateEndBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateEndBuild).UnmarshalJSON(data))
			}
		case "withoutFinishingOption":
			out.WithoutFinishingOption = bool(in.Bool())
		case "finishingOption":
			out.FinishingOption = bool(in.Bool())
		case "preFinishingOption":
			out.PreFinishingOption = bool(in.Bool())
		case "classHousing":
			out.ClassHousing = ClassHouse(in.String())
		case "parking":
			out.Parking = bool(in.Bool())
		case "security":
			out.Security = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels32(out *jwriter.Writer, in ComplexCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"companyId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CompanyId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"dateBeginBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateBeginBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"dateEndBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateEndBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"withoutFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.WithoutFinishingOption))
	}
	{
		const prefix string = ",\"finishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.FinishingOption))
	}
	{
		const prefix string = ",\"preFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreFinishingOption))
	}
	{
		const prefix string = ",\"classHousing\":"
		out.RawString(prefix)
		out.String(string(in.ClassHousing))
	}
	{
		const prefix string = ",\"parking\":"
		out.RawString(prefix)
		out.Bool(bool(in.Parking))
	}
	{
		const prefix string = ",\"security\":"
		out.RawString(prefix)
		out.Bool(bool(in.Security))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplexCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplexCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplexCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplexCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels32(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels33(in *jlexer.Lexer, out *ComplexAdvertProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complexId":
			out.ComplexId = string(in.String())
		case "nameComplex":
			out.NameComplex = string(in.String())
		case "photoCompany":
			out.PhotoCompany = string(in.String())
		case "nameCompany":
			out.NameCompany = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels33(out *jwriter.Writer, in ComplexAdvertProperties) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complexId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ComplexId))
	}
	{
		const prefix string = ",\"nameComplex\":"
		out.RawString(prefix)
		out.String(string(in.NameComplex))
	}
	{
		const prefix string = ",\"photoCompany\":"
		out.RawString(prefix)
		out.String(string(in.PhotoCompany))
	}
	{
		const prefix string = ",\"nameCompany\":"
		out.RawString(prefix)
		out.String(string(in.NameCompany))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplexAdvertProperties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplexAdvertProperties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplexAdvertProperties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplexAdvertProperties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels33(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels34(in *jlexer.Lexer, out *ComplexAdvertHouseCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = int64(in.Int64())
		case "buildingId":
			out.BuildingID = int64(in.Int64())
		case "advertTypeSale":
			out.AdvertTypeSale = TypePlacementAdvert(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "statusArea":
			out.StatusArea = StatusAreaHouse(in.String())
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "statusHome":
			out.StatusHome = StatusHomeHouse(in.String())
		case "price":
			out.Price = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels34(out *jwriter.Writer, in ComplexAdvertHouseCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"buildingId\":"
		out.RawString(prefix)
		out.Int64(int64(in.BuildingID))
	}
	{
		const prefix string = ",\"advertTypeSale\":"
		out.RawString(prefix)
		out.String(string(in.AdvertTypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"statusArea\":"
		out.RawString(prefix)
		out.String(string(in.StatusArea))
	}
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"statusHome\":"
		out.RawString(prefix)
		out.String(string(in.StatusHome))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplexAdvertHouseCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplexAdvertHouseCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplexAdvertHouseCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplexAdvertHouseCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels34(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels35(in *jlexer.Lexer, out *ComplexAdvertFlatCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = int64(in.Int64())
		case "buildingId":
			out.BuildingID = int64(in.Int64())
		case "advertTypeSale":
			out.AdvertTypeSale = TypePlacementAdvert(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "floor":
			out.Floor = int(in.Int())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareResidential":
			out.SquareResidential = float64(in.Float64())
		case "apartment":
			out.Apartment = bool(in.Bool())
		case "price":
			out.Price = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels35(out *jwriter.Writer, in ComplexAdvertFlatCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"buildingId\":"
		out.RawString(prefix)
		out.Int64(int64(in.BuildingID))
	}
	{
		const prefix string = ",\"advertTypeSale\":"
		out.RawString(prefix)
		out.String(string(in.AdvertTypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareResidential\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareResidential))
	}
	{
		const prefix string = ",\"apartment\":"
		out.RawString(prefix)
		out.Bool(bool(in.Apartment))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplexAdvertFlatCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplexAdvertFlatCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplexAdvertFlatCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplexAdvertFlatCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels35(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels36(in *jlexer.Lexer, out *Complex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "companyId":
			out.CompanyId = int64(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "dateBeginBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateBeginBuild).UnmarshalJSON(data))
			}
		case "dateEndBuild":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateEndBuild).UnmarshalJSON(data))
			}
		case "withoutFinishingOption":
			out.WithoutFinishingOption = bool(in.Bool())
		case "finishingOption":
			out.FinishingOption = bool(in.Bool())
		case "preFinishingOption":
			out.PreFinishingOption = bool(in.Bool())
		case "classHousing":
			out.ClassHousing = ClassHouse(in.String())
		case "parking":
			out.Parking = bool(in.Bool())
		case "security":
			out.Security = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels36(out *jwriter.Writer, in Complex) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"companyId\":"
		out.RawString(prefix)
		out.Int64(int64(in.CompanyId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"dateBeginBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateBeginBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"dateEndBuild\":"
		out.RawString(prefix)
		out.Raw((in.DateEndBuild).MarshalJSON())
	}
	{
		const prefix string = ",\"withoutFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.WithoutFinishingOption))
	}
	{
		const prefix string = ",\"finishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.FinishingOption))
	}
	{
		const prefix string = ",\"preFinishingOption\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreFinishingOption))
	}
	{
		const prefix string = ",\"classHousing\":"
		out.RawString(prefix)
		out.String(string(in.ClassHousing))
	}
	{
		const prefix string = ",\"parking\":"
		out.RawString(prefix)
		out.Bool(bool(in.Parking))
	}
	{
		const prefix string = ",\"security\":"
		out.RawString(prefix)
		out.Bool(bool(in.Security))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Complex) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Complex) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Complex) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Complex) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels36(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels37(in *jlexer.Lexer, out *CompanyData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "photo":
			out.Photo = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "yearFounded":
			out.YearFounded = int(in.Int())
		case "phone":
			out.Phone = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels37(out *jwriter.Writer, in CompanyData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"yearFounded\":"
		out.RawString(prefix)
		out.Int(int(in.YearFounded))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompanyData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompanyData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompanyData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompanyData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels37(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels38(in *jlexer.Lexer, out *CompanyCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "yearFounded":
			out.YearFounded = int(in.Int())
		case "phone":
			out.Phone = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels38(out *jwriter.Writer, in CompanyCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"yearFounded\":"
		out.RawString(prefix)
		out.Int(int(in.YearFounded))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompanyCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompanyCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompanyCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompanyCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels38(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels39(in *jlexer.Lexer, out *Company) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "photo":
			out.Photo = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "yearFounded":
			out.YearFounded = int(in.Int())
		case "phone":
			out.Phone = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels39(out *jwriter.Writer, in Company) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"yearFounded\":"
		out.RawString(prefix)
		out.Int(int(in.YearFounded))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Company) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Company) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Company) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Company) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels39(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels40(in *jlexer.Lexer, out *BuildingData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complexName":
			out.ComplexName = string(in.String())
		case "floor":
			out.Floor = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "yearCreation":
			out.YearCreation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels40(out *jwriter.Writer, in BuildingData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complexName\":"
		out.RawString(prefix[1:])
		out.String(string(in.ComplexName))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuildingData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildingData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildingData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildingData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels40(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels41(in *jlexer.Lexer, out *BuildingCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complexId":
			out.ComplexID = int64(in.Int64())
		case "floor":
			out.Floor = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "adressId":
			out.AddressID = int64(in.Int64())
		case "yearCreation":
			out.YearCreation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels41(out *jwriter.Writer, in BuildingCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complexId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ComplexID))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"adressId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AddressID))
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuildingCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildingCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildingCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildingCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels41(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels42(in *jlexer.Lexer, out *Building) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "complexId":
			out.ComplexID = int64(in.Int64())
		case "floor":
			out.Floor = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "adressId":
			out.AddressID = int64(in.Int64())
		case "yearCreation":
			out.YearCreation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels42(out *jwriter.Writer, in Building) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"complexId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ComplexID))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"adressId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AddressID))
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Building) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Building) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Building) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Building) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels42(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels43(in *jlexer.Lexer, out *AdvertUpdateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "typeAdvert":
			out.TypeAdvert = string(in.String())
		case "typeSale":
			out.TypeSale = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "price":
			out.Price = int64(in.Int64())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "address":
			(out.Address).UnmarshalEasyJSON(in)
		case "houseProperties":
			if in.IsNull() {
				in.Skip()
				out.HouseProperties = nil
			} else {
				if out.HouseProperties == nil {
					out.HouseProperties = new(HouseProperties)
				}
				(*out.HouseProperties).UnmarshalEasyJSON(in)
			}
		case "flatProperties":
			if in.IsNull() {
				in.Skip()
				out.FlatProperties = nil
			} else {
				if out.FlatProperties == nil {
					out.FlatProperties = new(FlatProperties)
				}
				(*out.FlatProperties).UnmarshalEasyJSON(in)
			}
		case "yearCreation":
			out.YearCreation = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels43(out *jwriter.Writer, in AdvertUpdateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"typeAdvert\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TypeAdvert))
	}
	{
		const prefix string = ",\"typeSale\":"
		out.RawString(prefix)
		out.String(string(in.TypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		(in.Address).MarshalEasyJSON(out)
	}
	if in.HouseProperties != nil {
		const prefix string = ",\"houseProperties\":"
		out.RawString(prefix)
		(*in.HouseProperties).MarshalEasyJSON(out)
	}
	if in.FlatProperties != nil {
		const prefix string = ",\"flatProperties\":"
		out.RawString(prefix)
		(*in.FlatProperties).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertUpdateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertUpdateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertUpdateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertUpdateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels43(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels44(in *jlexer.Lexer, out *AdvertType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "advertType":
			out.AdvertType = AdvertTypeAdvert(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels44(out *jwriter.Writer, in AdvertType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"advertType\":"
		out.RawString(prefix)
		out.String(string(in.AdvertType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels44(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels45(in *jlexer.Lexer, out *AdvertSquareData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertId":
			out.ID = int64(in.Int64())
		case "typeAdvert":
			out.TypeAdvert = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "typeSale":
			out.TypeSale = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "houseProperties":
			if in.IsNull() {
				in.Skip()
				out.HouseProperties = nil
			} else {
				if out.HouseProperties == nil {
					out.HouseProperties = new(HouseSquareProperties)
				}
				(*out.HouseProperties).UnmarshalEasyJSON(in)
			}
		case "flatProperties":
			if in.IsNull() {
				in.Skip()
				out.FlatProperties = nil
			} else {
				if out.FlatProperties == nil {
					out.FlatProperties = new(FlatSquareProperties)
				}
				(*out.FlatProperties).UnmarshalEasyJSON(in)
			}
		case "price":
			out.Price = int(in.Int())
		case "dateCreation":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreation).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels45(out *jwriter.Writer, in AdvertSquareData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"typeAdvert\":"
		out.RawString(prefix)
		out.String(string(in.TypeAdvert))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"typeSale\":"
		out.RawString(prefix)
		out.String(string(in.TypeSale))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"metro\":"
		out.RawString(prefix)
		out.String(string(in.Metro))
	}
	if in.HouseProperties != nil {
		const prefix string = ",\"houseProperties\":"
		out.RawString(prefix)
		(*in.HouseProperties).MarshalEasyJSON(out)
	}
	if in.FlatProperties != nil {
		const prefix string = ",\"flatProperties\":"
		out.RawString(prefix)
		(*in.FlatProperties).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"dateCreation\":"
		out.RawString(prefix)
		out.Raw((in.DateCreation).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertSquareData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertSquareData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertSquareData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertSquareData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels45(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels46(in *jlexer.Lexer, out *AdvertRectangleData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertId":
			out.ID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "typeAdvert":
			out.TypeAdvert = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "typeSale":
			out.TypeSale = string(in.String())
		case "adress":
			out.Address = string(in.String())
		case "adressPoint":
			out.AddressPoint = string(in.String())
		case "rating":
			out.Rating = string(in.String())
		case "isLiked":
			out.IsLiked = bool(in.Bool())
		case "flatProperties":
			if in.IsNull() {
				in.Skip()
				out.FlatProperties = nil
			} else {
				if out.FlatProperties == nil {
					out.FlatProperties = new(FlatRectangleProperties)
				}
				(*out.FlatProperties).UnmarshalEasyJSON(in)
			}
		case "houseProperties":
			if in.IsNull() {
				in.Skip()
				out.HouseProperties = nil
			} else {
				if out.HouseProperties == nil {
					out.HouseProperties = new(HouseRectangleProperties)
				}
				(*out.HouseProperties).UnmarshalEasyJSON(in)
			}
		case "price":
			out.Price = int(in.Int())
		case "dateCreation":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreation).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels46(out *jwriter.Writer, in AdvertRectangleData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"typeAdvert\":"
		out.RawString(prefix)
		out.String(string(in.TypeAdvert))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		out.String(string(in.Photo))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"typeSale\":"
		out.RawString(prefix)
		out.String(string(in.TypeSale))
	}
	{
		const prefix string = ",\"adress\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"adressPoint\":"
		out.RawString(prefix)
		out.String(string(in.AddressPoint))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.String(string(in.Rating))
	}
	{
		const prefix string = ",\"isLiked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	if in.FlatProperties != nil {
		const prefix string = ",\"flatProperties\":"
		out.RawString(prefix)
		(*in.FlatProperties).MarshalEasyJSON(out)
	}
	if in.HouseProperties != nil {
		const prefix string = ",\"houseProperties\":"
		out.RawString(prefix)
		(*in.HouseProperties).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int(int(in.Price))
	}
	{
		const prefix string = ",\"dateCreation\":"
		out.RawString(prefix)
		out.Raw((in.DateCreation).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertRectangleData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertRectangleData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertRectangleData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertRectangleData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels46(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels47(in *jlexer.Lexer, out *AdvertHouseCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = int64(in.Int64())
		case "advertTypeSale":
			out.AdvertTypeSale = TypePlacementAdvert(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareArea":
			out.SquareArea = float64(in.Float64())
		case "squareHouse":
			out.SquareHouse = float64(in.Float64())
		case "bedroomCount":
			out.BedroomCount = int(in.Int())
		case "statusArea":
			out.StatusArea = StatusAreaHouse(in.String())
		case "cottage":
			out.Cottage = bool(in.Bool())
		case "statusHome":
			out.StatusHome = StatusHomeHouse(in.String())
		case "price":
			out.Price = int64(in.Int64())
		case "floorGeneral":
			out.FloorGeneral = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "address":
			(out.Address).UnmarshalEasyJSON(in)
		case "yearCreation":
			out.YearCreation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels47(out *jwriter.Writer, in AdvertHouseCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"advertTypeSale\":"
		out.RawString(prefix)
		out.String(string(in.AdvertTypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareArea\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareArea))
	}
	{
		const prefix string = ",\"squareHouse\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareHouse))
	}
	{
		const prefix string = ",\"bedroomCount\":"
		out.RawString(prefix)
		out.Int(int(in.BedroomCount))
	}
	{
		const prefix string = ",\"statusArea\":"
		out.RawString(prefix)
		out.String(string(in.StatusArea))
	}
	{
		const prefix string = ",\"cottage\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cottage))
	}
	{
		const prefix string = ",\"statusHome\":"
		out.RawString(prefix)
		out.String(string(in.StatusHome))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"floorGeneral\":"
		out.RawString(prefix)
		out.Int(int(in.FloorGeneral))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		(in.Address).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertHouseCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertHouseCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertHouseCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertHouseCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels47(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels48(in *jlexer.Lexer, out *AdvertFlatCreateData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = int64(in.Int64())
		case "advertTypeSale":
			out.AdvertTypeSale = TypePlacementAdvert(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "floor":
			out.Floor = int(in.Int())
		case "ceilingHeight":
			out.CeilingHeight = float64(in.Float64())
		case "squareGeneral":
			out.SquareGeneral = float64(in.Float64())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "squareResidential":
			out.SquareResidential = float64(in.Float64())
		case "apartment":
			out.Apartment = bool(in.Bool())
		case "price":
			out.Price = int64(in.Int64())
		case "floorGeneral":
			out.FloorGeneral = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "address":
			(out.Address).UnmarshalEasyJSON(in)
		case "yearCreation":
			out.YearCreation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels48(out *jwriter.Writer, in AdvertFlatCreateData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"advertTypeSale\":"
		out.RawString(prefix)
		out.String(string(in.AdvertTypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"floor\":"
		out.RawString(prefix)
		out.Int(int(in.Floor))
	}
	{
		const prefix string = ",\"ceilingHeight\":"
		out.RawString(prefix)
		out.Float64(float64(in.CeilingHeight))
	}
	{
		const prefix string = ",\"squareGeneral\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareGeneral))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"squareResidential\":"
		out.RawString(prefix)
		out.Float64(float64(in.SquareResidential))
	}
	{
		const prefix string = ",\"apartment\":"
		out.RawString(prefix)
		out.Bool(bool(in.Apartment))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"floorGeneral\":"
		out.RawString(prefix)
		out.Int(int(in.FloorGeneral))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		(in.Address).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertFlatCreateData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertFlatCreateData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertFlatCreateData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertFlatCreateData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels48(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels49(in *jlexer.Lexer, out *AdvertFilter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "minPrice":
			out.MinPrice = int64(in.Int64())
		case "maxPrice":
			out.MaxPrice = int64(in.Int64())
		case "offset":
			out.Offset = int(in.Int())
		case "page":
			out.Page = int(in.Int())
		case "roomCount":
			out.RoomCount = int(in.Int())
		case "advertType":
			out.AdvertType = string(in.String())
		case "dealType":
			out.DealType = string(in.String())
		case "adress":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels49(out *jwriter.Writer, in AdvertFilter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"minPrice\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.MinPrice))
	}
	{
		const prefix string = ",\"maxPrice\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxPrice))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"roomCount\":"
		out.RawString(prefix)
		out.Int(int(in.RoomCount))
	}
	{
		const prefix string = ",\"advertType\":"
		out.RawString(prefix)
		out.String(string(in.AdvertType))
	}
	{
		const prefix string = ",\"dealType\":"
		out.RawString(prefix)
		out.String(string(in.DealType))
	}
	{
		const prefix string = ",\"adress\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertFilter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertFilter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertFilter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertFilter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels49(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels50(in *jlexer.Lexer, out *AdvertDataPage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "adverts":
			if in.IsNull() {
				in.Skip()
				out.Adverts = nil
			} else {
				in.Delim('[')
				if out.Adverts == nil {
					if !in.IsDelim(']') {
						out.Adverts = make([]*AdvertRectangleData, 0, 8)
					} else {
						out.Adverts = []*AdvertRectangleData{}
					}
				} else {
					out.Adverts = (out.Adverts)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *AdvertRectangleData
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(AdvertRectangleData)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Adverts = append(out.Adverts, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pageInfo":
			if in.IsNull() {
				in.Skip()
				out.PageInfo = nil
			} else {
				if out.PageInfo == nil {
					out.PageInfo = new(PageInfo)
				}
				(*out.PageInfo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels50(out *jwriter.Writer, in AdvertDataPage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"adverts\":"
		out.RawString(prefix[1:])
		if in.Adverts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Adverts {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pageInfo\":"
		out.RawString(prefix)
		if in.PageInfo == nil {
			out.RawString("null")
		} else {
			(*in.PageInfo).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertDataPage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertDataPage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertDataPage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertDataPage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels50(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels51(in *jlexer.Lexer, out *AdvertData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertId":
			out.ID = int64(in.Int64())
		case "advertType":
			out.AdvertType = string(in.String())
		case "typeSale":
			out.TypeSale = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "countViews":
			out.CountViews = int64(in.Int64())
		case "countLikes":
			out.CountLikes = int64(in.Int64())
		case "price":
			out.Price = int64(in.Int64())
		case "phone":
			out.Phone = string(in.String())
		case "isLiked":
			out.IsLiked = bool(in.Bool())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "metro":
			out.Metro = string(in.String())
		case "adress":
			out.Address = string(in.String())
		case "adressPoint":
			out.AddressPoint = string(in.String())
		case "priceHistory":
			if in.IsNull() {
				in.Skip()
				out.PriceChange = nil
			} else {
				in.Delim('[')
				if out.PriceChange == nil {
					if !in.IsDelim(']') {
						out.PriceChange = make([]*PriceChangeData, 0, 8)
					} else {
						out.PriceChange = []*PriceChangeData{}
					}
				} else {
					out.PriceChange = (out.PriceChange)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *PriceChangeData
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(PriceChangeData)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.PriceChange = append(out.PriceChange, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]*ImageResp, 0, 8)
					} else {
						out.Images = []*ImageResp{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *ImageResp
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(ImageResp)
						}
						(*v11).UnmarshalEasyJSON(in)
					}
					out.Images = append(out.Images, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "houseProperties":
			if in.IsNull() {
				in.Skip()
				out.HouseProperties = nil
			} else {
				if out.HouseProperties == nil {
					out.HouseProperties = new(HouseProperties)
				}
				(*out.HouseProperties).UnmarshalEasyJSON(in)
			}
		case "flatProperties":
			if in.IsNull() {
				in.Skip()
				out.FlatProperties = nil
			} else {
				if out.FlatProperties == nil {
					out.FlatProperties = new(FlatProperties)
				}
				(*out.FlatProperties).UnmarshalEasyJSON(in)
			}
		case "yearCreation":
			out.YearCreation = int(in.Int())
		case "material":
			out.Material = MaterialBuilding(in.String())
		case "complexProperties":
			if in.IsNull() {
				in.Skip()
				out.ComplexProperties = nil
			} else {
				if out.ComplexProperties == nil {
					out.ComplexProperties = new(ComplexAdvertProperties)
				}
				(*out.ComplexProperties).UnmarshalEasyJSON(in)
			}
		case "dateCreation":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateCreation).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels51(out *jwriter.Writer, in AdvertData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advertId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"advertType\":"
		out.RawString(prefix)
		out.String(string(in.AdvertType))
	}
	{
		const prefix string = ",\"typeSale\":"
		out.RawString(prefix)
		out.String(string(in.TypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"countViews\":"
		out.RawString(prefix)
		out.Int64(int64(in.CountViews))
	}
	{
		const prefix string = ",\"countLikes\":"
		out.RawString(prefix)
		out.Int64(int64(in.CountLikes))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isLiked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"metro\":"
		out.RawString(prefix)
		out.String(string(in.Metro))
	}
	{
		const prefix string = ",\"adress\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"adressPoint\":"
		out.RawString(prefix)
		out.String(string(in.AddressPoint))
	}
	{
		const prefix string = ",\"priceHistory\":"
		out.RawString(prefix)
		if in.PriceChange == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.PriceChange {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Images {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.HouseProperties != nil {
		const prefix string = ",\"houseProperties\":"
		out.RawString(prefix)
		(*in.HouseProperties).MarshalEasyJSON(out)
	}
	if in.FlatProperties != nil {
		const prefix string = ",\"flatProperties\":"
		out.RawString(prefix)
		(*in.FlatProperties).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"yearCreation\":"
		out.RawString(prefix)
		out.Int(int(in.YearCreation))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	if in.ComplexProperties != nil {
		const prefix string = ",\"complexProperties\":"
		out.RawString(prefix)
		(*in.ComplexProperties).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"dateCreation\":"
		out.RawString(prefix)
		out.Raw((in.DateCreation).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdvertData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdvertData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdvertData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdvertData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels51(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels52(in *jlexer.Lexer, out *Advert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "userId":
			out.UserID = int64(in.Int64())
		case "advertTypeSale":
			out.AdvertTypeSale = TypePlacementAdvert(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "isAgent":
			out.IsAgent = bool(in.Bool())
		case "priority":
			out.Priority = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels52(out *jwriter.Writer, in Advert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"advertTypeSale\":"
		out.RawString(prefix)
		out.String(string(in.AdvertTypeSale))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"isAgent\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAgent))
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int(int(in.Priority))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Advert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Advert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Advert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Advert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels52(l, v)
}
func easyjsonD2b7633eDecode20241TeaStealersInternalModels53(in *jlexer.Lexer, out *AddressData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "province":
			out.Province = string(in.String())
		case "town":
			out.Town = string(in.String())
		case "street":
			out.Street = string(in.String())
		case "house":
			out.House = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "addressPoint":
			out.AddressPoint = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20241TeaStealersInternalModels53(out *jwriter.Writer, in AddressData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"province\":"
		out.RawString(prefix[1:])
		out.String(string(in.Province))
	}
	{
		const prefix string = ",\"town\":"
		out.RawString(prefix)
		out.String(string(in.Town))
	}
	{
		const prefix string = ",\"street\":"
		out.RawString(prefix)
		out.String(string(in.Street))
	}
	{
		const prefix string = ",\"house\":"
		out.RawString(prefix)
		out.String(string(in.House))
	}
	{
		const prefix string = ",\"metro\":"
		out.RawString(prefix)
		out.String(string(in.Metro))
	}
	{
		const prefix string = ",\"addressPoint\":"
		out.RawString(prefix)
		out.String(string(in.AddressPoint))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddressData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20241TeaStealersInternalModels53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddressData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20241TeaStealersInternalModels53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddressData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20241TeaStealersInternalModels53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddressData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20241TeaStealersInternalModels53(l, v)
}
