// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package companies_mock is a generated GoMock package.
package companies_mock

import (
	models "2024_1_TeaStealers/internal/models"
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCompanyUsecase is a mock of CompanyUsecase interface.
type MockCompanyUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyUsecaseMockRecorder
}

// MockCompanyUsecaseMockRecorder is the mock recorder for MockCompanyUsecase.
type MockCompanyUsecaseMockRecorder struct {
	mock *MockCompanyUsecase
}

// NewMockCompanyUsecase creates a new mock instance.
func NewMockCompanyUsecase(ctrl *gomock.Controller) *MockCompanyUsecase {
	mock := &MockCompanyUsecase{ctrl: ctrl}
	mock.recorder = &MockCompanyUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyUsecase) EXPECT() *MockCompanyUsecaseMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanyUsecase) CreateCompany(ctx context.Context, data *models.CompanyCreateData) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, data)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyUsecaseMockRecorder) CreateCompany(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanyUsecase)(nil).CreateCompany), ctx, data)
}

// GetCompanyById mocks base method.
func (m *MockCompanyUsecase) GetCompanyById(ctx context.Context, id int64) (*models.CompanyData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyById", ctx, id)
	ret0, _ := ret[0].(*models.CompanyData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyById indicates an expected call of GetCompanyById.
func (mr *MockCompanyUsecaseMockRecorder) GetCompanyById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyById", reflect.TypeOf((*MockCompanyUsecase)(nil).GetCompanyById), ctx, id)
}

// UpdateCompanyPhoto mocks base method.
func (m *MockCompanyUsecase) UpdateCompanyPhoto(file io.Reader, fileType string, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyPhoto", file, fileType, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompanyPhoto indicates an expected call of UpdateCompanyPhoto.
func (mr *MockCompanyUsecaseMockRecorder) UpdateCompanyPhoto(file, fileType, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyPhoto", reflect.TypeOf((*MockCompanyUsecase)(nil).UpdateCompanyPhoto), file, fileType, id)
}

// MockCompanyRepo is a mock of CompanyRepo interface.
type MockCompanyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyRepoMockRecorder
}

// MockCompanyRepoMockRecorder is the mock recorder for MockCompanyRepo.
type MockCompanyRepoMockRecorder struct {
	mock *MockCompanyRepo
}

// NewMockCompanyRepo creates a new mock instance.
func NewMockCompanyRepo(ctrl *gomock.Controller) *MockCompanyRepo {
	mock := &MockCompanyRepo{ctrl: ctrl}
	mock.recorder = &MockCompanyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyRepo) EXPECT() *MockCompanyRepoMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanyRepo) CreateCompany(ctx context.Context, company *models.Company) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, company)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyRepoMockRecorder) CreateCompany(ctx, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanyRepo)(nil).CreateCompany), ctx, company)
}

// GetCompanyById mocks base method.
func (m *MockCompanyRepo) GetCompanyById(ctx context.Context, companyId int64) (*models.CompanyData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyById", ctx, companyId)
	ret0, _ := ret[0].(*models.CompanyData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyById indicates an expected call of GetCompanyById.
func (mr *MockCompanyRepoMockRecorder) GetCompanyById(ctx, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyById", reflect.TypeOf((*MockCompanyRepo)(nil).GetCompanyById), ctx, companyId)
}

// UpdateCompanyPhoto mocks base method.
func (m *MockCompanyRepo) UpdateCompanyPhoto(id int64, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyPhoto", id, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompanyPhoto indicates an expected call of UpdateCompanyPhoto.
func (mr *MockCompanyRepoMockRecorder) UpdateCompanyPhoto(id, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyPhoto", reflect.TypeOf((*MockCompanyRepo)(nil).UpdateCompanyPhoto), id, fileName)
}
