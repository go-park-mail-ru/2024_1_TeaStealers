// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package complex_mock is a generated GoMock package.
package complex_mock

import (
	models "2024_1_TeaStealers/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockComplexUsecase is a mock of ComplexUsecase interface.
type MockComplexUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockComplexUsecaseMockRecorder
}

// MockComplexUsecaseMockRecorder is the mock recorder for MockComplexUsecase.
type MockComplexUsecaseMockRecorder struct {
	mock *MockComplexUsecase
}

// NewMockComplexUsecase creates a new mock instance.
func NewMockComplexUsecase(ctrl *gomock.Controller) *MockComplexUsecase {
	mock := &MockComplexUsecase{ctrl: ctrl}
	mock.recorder = &MockComplexUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplexUsecase) EXPECT() *MockComplexUsecaseMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockComplexUsecase) CreateCompany(ctx context.Context, data *models.CompanyCreateData) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, data)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockComplexUsecaseMockRecorder) CreateCompany(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockComplexUsecase)(nil).CreateCompany), ctx, data)
}

// CreateComplex mocks base method.
func (m *MockComplexUsecase) CreateComplex(ctx context.Context, data *models.ComplexCreateData) (*models.Complex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComplex", ctx, data)
	ret0, _ := ret[0].(*models.Complex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComplex indicates an expected call of CreateComplex.
func (mr *MockComplexUsecaseMockRecorder) CreateComplex(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComplex", reflect.TypeOf((*MockComplexUsecase)(nil).CreateComplex), ctx, data)
}

// GetCompanyById mocks base method.
func (m *MockComplexUsecase) GetCompanyById(ctx context.Context, id int64) (*models.CompanyData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyById", ctx, id)
	ret0, _ := ret[0].(*models.CompanyData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyById indicates an expected call of GetCompanyById.
func (mr *MockComplexUsecaseMockRecorder) GetCompanyById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyById", reflect.TypeOf((*MockComplexUsecase)(nil).GetCompanyById), ctx, id)
}

// GetComplexById mocks base method.
func (m *MockComplexUsecase) GetComplexById(ctx context.Context, id int64) (*models.ComplexData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplexById", ctx, id)
	ret0, _ := ret[0].(*models.ComplexData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplexById indicates an expected call of GetComplexById.
func (mr *MockComplexUsecaseMockRecorder) GetComplexById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplexById", reflect.TypeOf((*MockComplexUsecase)(nil).GetComplexById), ctx, id)
}

// UpdateCompanyPhoto mocks base method.
func (m *MockComplexUsecase) UpdateCompanyPhoto(ctx context.Context, id int64, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyPhoto", ctx, id, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompanyPhoto indicates an expected call of UpdateCompanyPhoto.
func (mr *MockComplexUsecaseMockRecorder) UpdateCompanyPhoto(ctx, id, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyPhoto", reflect.TypeOf((*MockComplexUsecase)(nil).UpdateCompanyPhoto), ctx, id, filename)
}

// UpdateComplexPhoto mocks base method.
func (m *MockComplexUsecase) UpdateComplexPhoto(ctx context.Context, id int64, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComplexPhoto", ctx, id, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComplexPhoto indicates an expected call of UpdateComplexPhoto.
func (mr *MockComplexUsecaseMockRecorder) UpdateComplexPhoto(ctx, id, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComplexPhoto", reflect.TypeOf((*MockComplexUsecase)(nil).UpdateComplexPhoto), ctx, id, filename)
}

// MockComplexRepo is a mock of ComplexRepo interface.
type MockComplexRepo struct {
	ctrl     *gomock.Controller
	recorder *MockComplexRepoMockRecorder
}

// MockComplexRepoMockRecorder is the mock recorder for MockComplexRepo.
type MockComplexRepoMockRecorder struct {
	mock *MockComplexRepo
}

// NewMockComplexRepo creates a new mock instance.
func NewMockComplexRepo(ctrl *gomock.Controller) *MockComplexRepo {
	mock := &MockComplexRepo{ctrl: ctrl}
	mock.recorder = &MockComplexRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplexRepo) EXPECT() *MockComplexRepoMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockComplexRepo) BeginTx(ctx context.Context) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockComplexRepoMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockComplexRepo)(nil).BeginTx), ctx)
}

// CreateCompany mocks base method.
func (m *MockComplexRepo) CreateCompany(ctx context.Context, company *models.Company) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, company)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockComplexRepoMockRecorder) CreateCompany(ctx, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockComplexRepo)(nil).CreateCompany), ctx, company)
}

// CreateComplex mocks base method.
func (m *MockComplexRepo) CreateComplex(ctx context.Context, company *models.Complex) (*models.Complex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComplex", ctx, company)
	ret0, _ := ret[0].(*models.Complex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComplex indicates an expected call of CreateComplex.
func (mr *MockComplexRepoMockRecorder) CreateComplex(ctx, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComplex", reflect.TypeOf((*MockComplexRepo)(nil).CreateComplex), ctx, company)
}

// GetCompanyById mocks base method.
func (m *MockComplexRepo) GetCompanyById(ctx context.Context, companyId int64) (*models.CompanyData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyById", ctx, companyId)
	ret0, _ := ret[0].(*models.CompanyData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyById indicates an expected call of GetCompanyById.
func (mr *MockComplexRepoMockRecorder) GetCompanyById(ctx, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyById", reflect.TypeOf((*MockComplexRepo)(nil).GetCompanyById), ctx, companyId)
}

// GetComplexById mocks base method.
func (m *MockComplexRepo) GetComplexById(ctx context.Context, complexId int64) (*models.ComplexData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplexById", ctx, complexId)
	ret0, _ := ret[0].(*models.ComplexData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplexById indicates an expected call of GetComplexById.
func (mr *MockComplexRepoMockRecorder) GetComplexById(ctx, complexId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplexById", reflect.TypeOf((*MockComplexRepo)(nil).GetComplexById), ctx, complexId)
}

// UpdateCompanyPhoto mocks base method.
func (m *MockComplexRepo) UpdateCompanyPhoto(ctx context.Context, id int64, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyPhoto", ctx, id, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompanyPhoto indicates an expected call of UpdateCompanyPhoto.
func (mr *MockComplexRepoMockRecorder) UpdateCompanyPhoto(ctx, id, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyPhoto", reflect.TypeOf((*MockComplexRepo)(nil).UpdateCompanyPhoto), ctx, id, fileName)
}

// UpdateComplexPhoto mocks base method.
func (m *MockComplexRepo) UpdateComplexPhoto(ctx context.Context, id int64, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComplexPhoto", ctx, id, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComplexPhoto indicates an expected call of UpdateComplexPhoto.
func (mr *MockComplexRepoMockRecorder) UpdateComplexPhoto(ctx, id, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComplexPhoto", reflect.TypeOf((*MockComplexRepo)(nil).UpdateComplexPhoto), ctx, id, fileName)
}
