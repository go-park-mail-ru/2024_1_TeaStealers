// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package complexes_mock is a generated GoMock package.
package complexes_mock

import (
	models "2024_1_TeaStealers/internal/models"
	context "context"
	sql "database/sql"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/uuid"
)

// MockComplexUsecase is a mock of ComplexUsecase interface.
type MockComplexUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockComplexUsecaseMockRecorder
}

// MockComplexUsecaseMockRecorder is the mock recorder for MockComplexUsecase.
type MockComplexUsecaseMockRecorder struct {
	mock *MockComplexUsecase
}

// NewMockComplexUsecase creates a new mock instance.
func NewMockComplexUsecase(ctrl *gomock.Controller) *MockComplexUsecase {
	mock := &MockComplexUsecase{ctrl: ctrl}
	mock.recorder = &MockComplexUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplexUsecase) EXPECT() *MockComplexUsecaseMockRecorder {
	return m.recorder
}

// CreateBuilding mocks base method.
func (m *MockComplexUsecase) CreateBuilding(ctx context.Context, data *models.BuildingCreateData) (*models.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuilding", ctx, data)
	ret0, _ := ret[0].(*models.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuilding indicates an expected call of CreateBuilding.
func (mr *MockComplexUsecaseMockRecorder) CreateBuilding(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuilding", reflect.TypeOf((*MockComplexUsecase)(nil).CreateBuilding), ctx, data)
}

// CreateComplex mocks base method.
func (m *MockComplexUsecase) CreateComplex(ctx context.Context, data *models.ComplexCreateData) (*models.Complex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComplex", ctx, data)
	ret0, _ := ret[0].(*models.Complex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComplex indicates an expected call of CreateComplex.
func (mr *MockComplexUsecaseMockRecorder) CreateComplex(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComplex", reflect.TypeOf((*MockComplexUsecase)(nil).CreateComplex), ctx, data)
}

// CreateFlatAdvert mocks base method.
func (m *MockComplexUsecase) CreateFlatAdvert(ctx context.Context, data *models.ComplexAdvertFlatCreateData) (*models.Advert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlatAdvert", ctx, data)
	ret0, _ := ret[0].(*models.Advert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlatAdvert indicates an expected call of CreateFlatAdvert.
func (mr *MockComplexUsecaseMockRecorder) CreateFlatAdvert(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlatAdvert", reflect.TypeOf((*MockComplexUsecase)(nil).CreateFlatAdvert), ctx, data)
}

// CreateHouseAdvert mocks base method.
func (m *MockComplexUsecase) CreateHouseAdvert(ctx context.Context, data *models.ComplexAdvertHouseCreateData) (*models.Advert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHouseAdvert", ctx, data)
	ret0, _ := ret[0].(*models.Advert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHouseAdvert indicates an expected call of CreateHouseAdvert.
func (mr *MockComplexUsecaseMockRecorder) CreateHouseAdvert(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHouseAdvert", reflect.TypeOf((*MockComplexUsecase)(nil).CreateHouseAdvert), ctx, data)
}

// GetComplexById mocks base method.
func (m *MockComplexUsecase) GetComplexById(ctx context.Context, id uuid.UUID) (*models.ComplexData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplexById", ctx, id)
	ret0, _ := ret[0].(*models.ComplexData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplexById indicates an expected call of GetComplexById.
func (mr *MockComplexUsecaseMockRecorder) GetComplexById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplexById", reflect.TypeOf((*MockComplexUsecase)(nil).GetComplexById), ctx, id)
}

// UpdateComplexPhoto mocks base method.
func (m *MockComplexUsecase) UpdateComplexPhoto(file io.Reader, fileType string, id uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComplexPhoto", file, fileType, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComplexPhoto indicates an expected call of UpdateComplexPhoto.
func (mr *MockComplexUsecaseMockRecorder) UpdateComplexPhoto(file, fileType, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComplexPhoto", reflect.TypeOf((*MockComplexUsecase)(nil).UpdateComplexPhoto), file, fileType, id)
}

// MockComplexRepo is a mock of ComplexRepo interface.
type MockComplexRepo struct {
	ctrl     *gomock.Controller
	recorder *MockComplexRepoMockRecorder
}

// MockComplexRepoMockRecorder is the mock recorder for MockComplexRepo.
type MockComplexRepoMockRecorder struct {
	mock *MockComplexRepo
}

// NewMockComplexRepo creates a new mock instance.
func NewMockComplexRepo(ctrl *gomock.Controller) *MockComplexRepo {
	mock := &MockComplexRepo{ctrl: ctrl}
	mock.recorder = &MockComplexRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplexRepo) EXPECT() *MockComplexRepoMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockComplexRepo) BeginTx(ctx context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockComplexRepoMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockComplexRepo)(nil).BeginTx), ctx)
}

// CreateAdvert mocks base method.
func (m *MockComplexRepo) CreateAdvert(ctx context.Context, tx *sql.Tx, newAdvert *models.Advert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdvert", ctx, tx, newAdvert)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdvert indicates an expected call of CreateAdvert.
func (mr *MockComplexRepoMockRecorder) CreateAdvert(ctx, tx, newAdvert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdvert", reflect.TypeOf((*MockComplexRepo)(nil).CreateAdvert), ctx, tx, newAdvert)
}

// CreateAdvertType mocks base method.
func (m *MockComplexRepo) CreateAdvertType(ctx context.Context, tx *sql.Tx, newAdvertType *models.AdvertType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdvertType", ctx, tx, newAdvertType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdvertType indicates an expected call of CreateAdvertType.
func (mr *MockComplexRepoMockRecorder) CreateAdvertType(ctx, tx, newAdvertType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdvertType", reflect.TypeOf((*MockComplexRepo)(nil).CreateAdvertType), ctx, tx, newAdvertType)
}

// CreateBuilding mocks base method.
func (m *MockComplexRepo) CreateBuilding(ctx context.Context, complex *models.Building) (*models.Building, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuilding", ctx, complex)
	ret0, _ := ret[0].(*models.Building)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuilding indicates an expected call of CreateBuilding.
func (mr *MockComplexRepoMockRecorder) CreateBuilding(ctx, complex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuilding", reflect.TypeOf((*MockComplexRepo)(nil).CreateBuilding), ctx, complex)
}

// CreateComplex mocks base method.
func (m *MockComplexRepo) CreateComplex(ctx context.Context, company *models.Complex) (*models.Complex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComplex", ctx, company)
	ret0, _ := ret[0].(*models.Complex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComplex indicates an expected call of CreateComplex.
func (mr *MockComplexRepoMockRecorder) CreateComplex(ctx, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComplex", reflect.TypeOf((*MockComplexRepo)(nil).CreateComplex), ctx, company)
}

// CreateFlat mocks base method.
func (m *MockComplexRepo) CreateFlat(ctx context.Context, tx *sql.Tx, newFlat *models.Flat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlat", ctx, tx, newFlat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFlat indicates an expected call of CreateFlat.
func (mr *MockComplexRepoMockRecorder) CreateFlat(ctx, tx, newFlat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlat", reflect.TypeOf((*MockComplexRepo)(nil).CreateFlat), ctx, tx, newFlat)
}

// CreateHouse mocks base method.
func (m *MockComplexRepo) CreateHouse(ctx context.Context, tx *sql.Tx, newHouse *models.House) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHouse", ctx, tx, newHouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHouse indicates an expected call of CreateHouse.
func (mr *MockComplexRepoMockRecorder) CreateHouse(ctx, tx, newHouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHouse", reflect.TypeOf((*MockComplexRepo)(nil).CreateHouse), ctx, tx, newHouse)
}

// CreatePriceChange mocks base method.
func (m *MockComplexRepo) CreatePriceChange(ctx context.Context, tx *sql.Tx, newPriceChange *models.PriceChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePriceChange", ctx, tx, newPriceChange)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePriceChange indicates an expected call of CreatePriceChange.
func (mr *MockComplexRepoMockRecorder) CreatePriceChange(ctx, tx, newPriceChange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePriceChange", reflect.TypeOf((*MockComplexRepo)(nil).CreatePriceChange), ctx, tx, newPriceChange)
}

// GetComplexById mocks base method.
func (m *MockComplexRepo) GetComplexById(ctx context.Context, complexId uuid.UUID) (*models.ComplexData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComplexById", ctx, complexId)
	ret0, _ := ret[0].(*models.ComplexData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComplexById indicates an expected call of GetComplexById.
func (mr *MockComplexRepoMockRecorder) GetComplexById(ctx, complexId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComplexById", reflect.TypeOf((*MockComplexRepo)(nil).GetComplexById), ctx, complexId)
}

// UpdateComplexPhoto mocks base method.
func (m *MockComplexRepo) UpdateComplexPhoto(id uuid.UUID, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComplexPhoto", id, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComplexPhoto indicates an expected call of UpdateComplexPhoto.
func (mr *MockComplexRepoMockRecorder) UpdateComplexPhoto(id, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComplexPhoto", reflect.TypeOf((*MockComplexRepo)(nil).UpdateComplexPhoto), id, fileName)
}
