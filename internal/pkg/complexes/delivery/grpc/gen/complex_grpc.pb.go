// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: complex.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Complex_CreateCompany_FullMethodName      = "/complex.Complex/CreateCompany"
	Complex_GetCompanyById_FullMethodName     = "/complex.Complex/GetCompanyById"
	Complex_UpdateCompanyPhoto_FullMethodName = "/complex.Complex/UpdateCompanyPhoto"
)

// ComplexClient is the client API for Complex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplexClient interface {
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*CreateCompanyResponse, error)
	GetCompanyById(ctx context.Context, in *GetCompanyByIdRequest, opts ...grpc.CallOption) (*GetCompanyByIdResponse, error)
	UpdateCompanyPhoto(ctx context.Context, in *UpdateCompanyPhotoRequest, opts ...grpc.CallOption) (*UpdateCompanyPhotoResponse, error)
}

type complexClient struct {
	cc grpc.ClientConnInterface
}

func NewComplexClient(cc grpc.ClientConnInterface) ComplexClient {
	return &complexClient{cc}
}

func (c *complexClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*CreateCompanyResponse, error) {
	out := new(CreateCompanyResponse)
	err := c.cc.Invoke(ctx, Complex_CreateCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexClient) GetCompanyById(ctx context.Context, in *GetCompanyByIdRequest, opts ...grpc.CallOption) (*GetCompanyByIdResponse, error) {
	out := new(GetCompanyByIdResponse)
	err := c.cc.Invoke(ctx, Complex_GetCompanyById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complexClient) UpdateCompanyPhoto(ctx context.Context, in *UpdateCompanyPhotoRequest, opts ...grpc.CallOption) (*UpdateCompanyPhotoResponse, error) {
	out := new(UpdateCompanyPhotoResponse)
	err := c.cc.Invoke(ctx, Complex_UpdateCompanyPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplexServer is the server API for Complex service.
// All implementations must embed UnimplementedComplexServer
// for forward compatibility
type ComplexServer interface {
	CreateCompany(context.Context, *CreateCompanyRequest) (*CreateCompanyResponse, error)
	GetCompanyById(context.Context, *GetCompanyByIdRequest) (*GetCompanyByIdResponse, error)
	UpdateCompanyPhoto(context.Context, *UpdateCompanyPhotoRequest) (*UpdateCompanyPhotoResponse, error)
	mustEmbedUnimplementedComplexServer()
}

// UnimplementedComplexServer must be embedded to have forward compatible implementations.
type UnimplementedComplexServer struct {
}

func (UnimplementedComplexServer) CreateCompany(context.Context, *CreateCompanyRequest) (*CreateCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedComplexServer) GetCompanyById(context.Context, *GetCompanyByIdRequest) (*GetCompanyByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyById not implemented")
}
func (UnimplementedComplexServer) UpdateCompanyPhoto(context.Context, *UpdateCompanyPhotoRequest) (*UpdateCompanyPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyPhoto not implemented")
}
func (UnimplementedComplexServer) mustEmbedUnimplementedComplexServer() {}

// UnsafeComplexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplexServer will
// result in compilation errors.
type UnsafeComplexServer interface {
	mustEmbedUnimplementedComplexServer()
}

func RegisterComplexServer(s grpc.ServiceRegistrar, srv ComplexServer) {
	s.RegisterService(&Complex_ServiceDesc, srv)
}

func _Complex_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Complex_CreateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Complex_GetCompanyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServer).GetCompanyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Complex_GetCompanyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServer).GetCompanyById(ctx, req.(*GetCompanyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Complex_UpdateCompanyPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplexServer).UpdateCompanyPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Complex_UpdateCompanyPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplexServer).UpdateCompanyPhoto(ctx, req.(*UpdateCompanyPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Complex_ServiceDesc is the grpc.ServiceDesc for Complex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Complex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "complex.Complex",
	HandlerType: (*ComplexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _Complex_CreateCompany_Handler,
		},
		{
			MethodName: "GetCompanyById",
			Handler:    _Complex_GetCompanyById_Handler,
		},
		{
			MethodName: "UpdateCompanyPhoto",
			Handler:    _Complex_UpdateCompanyPhoto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "complex.proto",
}
